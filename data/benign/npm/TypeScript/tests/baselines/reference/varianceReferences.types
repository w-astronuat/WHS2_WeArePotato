//// [tests/cases/compiler/varianceReferences.ts] ////

=== varianceReferences.ts ===
type NumericConstraint<Value extends number> = Value;
>NumericConstraint : Value
>                  : ^^^^^

type VarianceConstrainedNumber<in out Value extends number> =
>VarianceConstrainedNumber : Value
>                          : ^^^^^

  NumericConstraint<Value>;

type Unconstrained<Value> = Value;
>Unconstrained : Value
>              : ^^^^^

type VarianceUnconstrained<in out Value> = Unconstrained<Value>;
>VarianceUnconstrained : Value
>                      : ^^^^^

type Level3of3Unconstrained<Value> = Value;
>Level3of3Unconstrained : Value
>                       : ^^^^^

type Level2of3Unconstrained<Value> = Level3of3Unconstrained<Value>;
>Level2of3Unconstrained : Value
>                       : ^^^^^

type Level1of3Unconstrained<Value> = Level2of3Unconstrained<Value>;
>Level1of3Unconstrained : Value
>                       : ^^^^^

type VarianceDeepUnconstrained<in out Value> = Level1of3Unconstrained<Value>;
>VarianceDeepUnconstrained : Value
>                          : ^^^^^

interface Shape<Value> {
  value: Value;
>value : Value
>      : ^^^^^
}

type VarianceShape<in out Value> = Shape<Value>;
>VarianceShape : VarianceShape<Value>
>              : ^^^^^^^^^^^^^^^^^^^^

interface Level3of3Shape<Value> {
  value: Value;
>value : Value
>      : ^^^^^
}

type Level2of3Shape<Value> = Level3of3Shape<Value>;
>Level2of3Shape : Level2of3Shape<Value>
>               : ^^^^^^^^^^^^^^^^^^^^^

type Level1of3Shape<Value> = Level2of3Shape<Value>;
>Level1of3Shape : Level1of3Shape<Value>
>               : ^^^^^^^^^^^^^^^^^^^^^

type VarianceDeepShape<in out Value> = Level1of3Shape<Value>;
>VarianceDeepShape : VarianceDeepShape<Value>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^

