{"version":3,"file":"ngx-pica-exif.service.js","sourceRoot":"","sources":["../../src/ngx-pica-exif.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport * as EXIF from 'exif-js';\n\n\n@Injectable()\nexport class NgxPicaExifService {\n\n    public getExifOrientedImage(image: HTMLImageElement): Promise<HTMLImageElement> {\n        return new Promise<HTMLImageElement>((resolve, reject) => {\n            EXIF.getData(image, () => {\n                const allExifMetaData = EXIF.getAllTags(image),\n                    exifOrientation = allExifMetaData.Orientation;\n\n                if (exifOrientation) {\n                    const canvas: HTMLCanvasElement = document.createElement('canvas'),\n                        ctx = canvas.getContext('2d'),\n                        width = image.width,\n                        height = image.height;\n\n                    if ([5, 6, 7, 8].indexOf(exifOrientation) > -1) {\n                        canvas.width = height;\n                        canvas.height = width;\n                    } else {\n                        canvas.width = width;\n                        canvas.height = height;\n                    }\n\n                    if (ctx) {\n                        // transform context before drawing image\n                        switch (exifOrientation) {\n                            case 2:\n                                ctx.transform(-1, 0, 0, 1, width, 0);\n                                break;\n                            case 3:\n                                ctx.transform(-1, 0, 0, -1, width, height);\n                                break;\n                            case 4:\n                                ctx.transform(1, 0, 0, -1, 0, height);\n                                break;\n                            case 5:\n                                ctx.transform(0, 1, 1, 0, 0, 0);\n                                break;\n                            case 6:\n                                ctx.transform(0, 1, -1, 0, height, 0);\n                                break;\n                            case 7:\n                                ctx.transform(0, -1, -1, 0, height, width);\n                                break;\n                            case 8:\n                                ctx.transform(0, -1, 1, 0, 0, width);\n                                break;\n                            default:\n                                ctx.transform(1, 0, 0, 1, 0, 0);\n                        }\n\n                        // Draw img into canvas\n                        ctx.drawImage(image, 0, 0, width, height);\n\n                        const img = new Image();\n\n                        img.width = width;\n                        img.height = height;\n\n                        img.onload = () => {\n                            resolve(img);\n                        };\n\n                        img.src = canvas.toDataURL();\n                    }\n                } else {\n                    resolve(image);\n                }\n            });\n        });\n    }\n\n}"]}