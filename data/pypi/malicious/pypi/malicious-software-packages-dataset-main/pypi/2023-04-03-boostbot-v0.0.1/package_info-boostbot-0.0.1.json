{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Security"], "description": "boostbot: a research tool for exploring GBDTs\r\nModern gradient boosting toolkits are very complex and are written in low-level programming languages. As a result,\r\n\r\nIt is hard to customize them to suit one\u00e2\u20ac\u2122s needs\r\nNew ideas and methods are not easy to implement\r\nIt is difficult to understand how they work\r\nboostbot is a Python-based gradient boosting library which aims at overcoming the aforementioned problems.\r\n\r\nAuthors: Synthetic\r\n\r\nboostbot Key Features\r\nSimple. boostbot is a simplified gradient boosting library, but it supports all main features and hyperparameters available in other implementations.\r\n\r\nFast with GPU. Despite the fact that boostbot is written in Python, it works only on GPU and uses Python GPU libraries such as CuPy and Numba.\r\n\r\nEfficient inference. Since v0.4 boostbot is able to perform the efficient inference of tree ensembles on GPU. Moreover, ones your model is trained on GPU, it could be converted to perform the inference on CPU only machine via converting to the treelite format with build-in wrapper (limitation - model should be trained with target_splitter='Single', which is the default).\r\n\r\nEasy to customize. boostbot can be easily customized even if one is not familiar with GPU programming (just replace np with cp). What can be customized? Almost everything via custom callbacks. Examples: Row/Col sampling strategy, Training control, Losses/metrics, Multioutput handling strategy, Anything via custom callbacks\r\n\r\nSketchBoost paper\r\nMultioutput training. Current state-of-atr boosting toolkits provide very limited support of multioutput training. And even if this option is available, training time for such tasks as multiclass/multilabel classification and multitask regression is quite slow because of the training complexity that scales linearly with the number of outputs. To overcome the existing limitations we create SketchBoost algorithm that uses approximate tree structure search. As we show in paper that strategy at least does not lead to performance decrease and often is able to improve the accuracy\r\n\r\nSketchBoost. You can try our sketching strategies by using SketchBoost class or if you want you can implement your own and pass to the GradientBoosting constructor as multioutput_sketch parameter. For the details please see Tutorial_2_Advanced_multioutput\r\n\r\nInstallation\r\nBefore installing boostbot via pip you should have cupy installed. You can use:\r\n\r\npip install -U cupy-cuda110 boostbot\r\n\r\nNote: replace with your cuda version! For the details see this guide\r\n\r\nQuick tour\r\nboostbot is easy to use since it has similar to scikit-learn interface. For usage example please see:\r\n\r\nTutorial_1_Basics for simple usage examples\r\nTutorial_2_Advanced_multioutput for advanced multioutput features\r\nTutorial_3_Custom_features for examples of customization\r\nMore examples are coming soon\r\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "boostbot", "package_url": "https://pypi.org/project/boostbot/", "platform": null, "project_url": "https://pypi.org/project/boostbot/", "project_urls": {"Homepage": "https://github.com/"}, "release_url": "https://pypi.org/project/boostbot/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "CUSTOM MODULE FOR MY BOOST BOT", "version": "0.0.1", "yanked": false, "yanked_reason": null}, "last_serial": 17558631, "releases": {"0.0.1": [{"comment_text": "", "digests": {"blake2b_256": "e6c9dd7e9d6a8b3d02e4eda4b54be39b2cb9720490aa58f89fc869860c4b8d61", "md5": "73660b3c8ce40ac02c771a2950e75f97", "sha256": "d449d3ee39138e88ebe11b5e534fa92182bb072cca1217db5134abff2b7ab7d1"}, "downloads": -1, "filename": "boostbot-0.0.1.tar.gz", "has_sig": false, "md5_digest": "73660b3c8ce40ac02c771a2950e75f97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15292, "upload_time": "2023-04-03T13:07:32", "upload_time_iso_8601": "2023-04-03T13:07:32.608683Z", "url": "https://files.pythonhosted.org/packages/e6/c9/dd7e9d6a8b3d02e4eda4b54be39b2cb9720490aa58f89fc869860c4b8d61/boostbot-0.0.1.tar.gz", "yanked": false, "yanked_reason": null}]}, "urls": [{"comment_text": "", "digests": {"blake2b_256": "e6c9dd7e9d6a8b3d02e4eda4b54be39b2cb9720490aa58f89fc869860c4b8d61", "md5": "73660b3c8ce40ac02c771a2950e75f97", "sha256": "d449d3ee39138e88ebe11b5e534fa92182bb072cca1217db5134abff2b7ab7d1"}, "downloads": -1, "filename": "boostbot-0.0.1.tar.gz", "has_sig": false, "md5_digest": "73660b3c8ce40ac02c771a2950e75f97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15292, "upload_time": "2023-04-03T13:07:32", "upload_time_iso_8601": "2023-04-03T13:07:32.608683Z", "url": "https://files.pythonhosted.org/packages/e6/c9/dd7e9d6a8b3d02e4eda4b54be39b2cb9720490aa58f89fc869860c4b8d61/boostbot-0.0.1.tar.gz", "yanked": false, "yanked_reason": null}], "vulnerabilities": []}