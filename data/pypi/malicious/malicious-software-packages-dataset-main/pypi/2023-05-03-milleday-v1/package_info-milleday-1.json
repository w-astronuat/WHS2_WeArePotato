{"info": {"author": "Mamadou Diakaby", "author_email": "maamdou@harley.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9"], "description": "\r\nDescription du projet\r\nLatest Version Supported Python versions Build Status\r\nColorama\r\n\r\nMakes ANSI escape character sequences (for producing colored terminal text and cursor positioning) work under MS Windows.\r\n\r\nPyPI for releases | Github for source | Colorama for enterprise on Tidelift\r\n\r\nIf you find Colorama useful, please Donate with Paypal to the authors. Thank you!\r\nInstallation\r\n\r\nTested on CPython 2.7, 3.7, 3.8, 3.9 and 3.10 and Pypy 2.7 and 3.8.\r\n\r\nNo requirements other than the standard library.\r\n\r\npip install colorama\r\n# or\r\nconda install -c anaconda colorama\r\n\r\nDescription\r\n\r\nANSI escape character sequences have long been used to produce colored terminal text and cursor positioning on Unix and Macs. Colorama makes this work on Windows, too, by wrapping stdout, stripping ANSI sequences it finds (which would appear as gobbledygook in the output), and converting them into the appropriate win32 calls to modify the state of the terminal. On other platforms, Colorama does nothing.\r\n\r\nThis has the upshot of providing a simple cross-platform API for printing colored terminal text from Python, and has the happy side-effect that existing applications or libraries which use ANSI sequences to produce colored output on Linux or Macs can now also work on Windows, simply by calling colorama.just_fix_windows_console() (since v0.4.6) or colorama.init() (all versions, but may have other side-effects \u00e2\u20ac\u201c see below).\r\n\r\nAn alternative approach is to install ansi.sys on Windows machines, which provides the same behaviour for all applications running in terminals. Colorama is intended for situations where that isn\u00e2\u20ac\u2122t easy (e.g., maybe your app doesn\u00e2\u20ac\u2122t have an installer.)\r\n\r\nDemo scripts in the source code repository print some colored text using ANSI sequences. Compare their output under Gnome-terminal\u00e2\u20ac\u2122s built in ANSI handling, versus on Windows Command-Prompt using Colorama:\r\nANSI sequences on Ubuntu under gnome-terminal. Same ANSI sequences on Windows, using Colorama.\r\n\r\nThese screenshots show that, on Windows, Colorama does not support ANSI \u00e2\u20ac\u02dcdim text\u00e2\u20ac\u2122; it looks the same as \u00e2\u20ac\u02dcnormal text\u00e2\u20ac\u2122.\r\nUsage\r\nInitialisation\r\n\r\nIf the only thing you want from Colorama is to get ANSI escapes to work on Windows, then run:\r\n\r\nfrom colorama import just_fix_windows_console\r\njust_fix_windows_console()\r\n\r\nIf you\u00e2\u20ac\u2122re on a recent version of Windows 10 or better, and your stdout/stderr are pointing to a Windows console, then this will flip the magic configuration switch to enable Windows\u00e2\u20ac\u2122 built-in ANSI support.\r\n\r\nIf you\u00e2\u20ac\u2122re on an older version of Windows, and your stdout/stderr are pointing to a Windows console, then this will wrap sys.stdout and/or sys.stderr in a magic file object that intercepts ANSI escape sequences and issues the appropriate Win32 calls to emulate them.\r\n\r\nIn all other circumstances, it does nothing whatsoever. Basically the idea is that this makes Windows act like Unix with respect to ANSI escape handling.\r\n\r\nIt\u00e2\u20ac\u2122s safe to call this function multiple times. It\u00e2\u20ac\u2122s safe to call this function on non-Windows platforms, but it won\u00e2\u20ac\u2122t do anything. It\u00e2\u20ac\u2122s safe to call this function when one or both of your stdout/stderr are redirected to a file \u00e2\u20ac\u201c it won\u00e2\u20ac\u2122t do anything to those streams.\r\n\r\nAlternatively, you can use the older interface with more features (but also more potential footguns):\r\n\r\nfrom colorama import init\r\ninit()\r\n\r\nThis does the same thing as just_fix_windows_console, except for the following differences:\r\n\r\n    It\u00e2\u20ac\u2122s not safe to call init multiple times; you can end up with multiple layers of wrapping and broken ANSI support.\r\n\r\n    Colorama will apply a heuristic to guess whether stdout/stderr support ANSI, and if it thinks they don\u00e2\u20ac\u2122t, then it will wrap sys.stdout and sys.stderr in a magic file object that strips out ANSI escape sequences before printing them. This happens on all platforms, and can be convenient if you want to write your code to emit ANSI escape sequences unconditionally, and let Colorama decide whether they should actually be output. But note that Colorama\u00e2\u20ac\u2122s heuristic is not particularly clever.\r\n\r\n    init also accepts explicit keyword args to enable/disable various functionality \u00e2\u20ac\u201c see below.\r\n\r\nTo stop using Colorama before your program exits, simply call deinit(). This will restore stdout and stderr to their original values, so that Colorama is disabled. To resume using Colorama again, call reinit(); it is cheaper than calling init() again (but does the same thing).\r\n\r\nMost users should depend on colorama >= 0.4.6, and use just_fix_windows_console. The old init interface will be supported indefinitely for backwards compatibility, but we don\u00e2\u20ac\u2122t plan to fix any issues with it, also for backwards compatibility.\r\nColored Output\r\n\r\nCross-platform printing of colored text can then be done using Colorama\u00e2\u20ac\u2122s constant shorthand for ANSI escape sequences. These are deliberately rudimentary, see below.\r\n\r\nfrom colorama import Fore, Back, Style\r\nprint(Fore.RED + 'some red text')\r\nprint(Back.GREEN + 'and with a green background')\r\nprint(Style.DIM + 'and in dim text')\r\nprint(Style.RESET_ALL)\r\nprint('back to normal now')\r\n\r\n\u00e2\u20ac\u00a6or simply by manually printing ANSI sequences from your own code:\r\n\r\nprint('\\033[31m' + 'some red text')\r\nprint('\\033[39m') # and reset to default color\r\n\r\n\u00e2\u20ac\u00a6or, Colorama can be used in conjunction with existing ANSI libraries such as the venerable Termcolor the fabulous Blessings, or the incredible _Rich.\r\n\r\nIf you wish Colorama\u00e2\u20ac\u2122s Fore, Back and Style constants were more capable, then consider using one of the above highly capable libraries to generate colors, etc, and use Colorama just for its primary purpose: to convert those ANSI sequences to also work on Windows:\r\n\r\nSIMILARLY, do not send PRs adding the generation of new ANSI types to Colorama. We are only interested in converting ANSI codes to win32 API calls, not shortcuts like the above to generate ANSI characters.\r\n\r\nfrom colorama import just_fix_windows_console\r\nfrom termcolor import colored\r\n\r\n# use Colorama to make Termcolor work on Windows too\r\njust_fix_windows_console()\r\n\r\n# then use Termcolor for all colored text output\r\nprint(colored('Hello, World!', 'green', 'on_red'))\r\n\r\nAvailable formatting constants are:\r\n\r\nFore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\r\nBack: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\r\nStyle: DIM, NORMAL, BRIGHT, RESET_ALL\r\n\r\nStyle.RESET_ALL resets foreground, background, and brightness. Colorama will perform this reset automatically on program exit.\r\n\r\nThese are fairly well supported, but not part of the standard:\r\n\r\nFore: LIGHTBLACK_EX, LIGHTRED_EX, LIGHTGREEN_EX, LIGHTYELLOW_EX, LIGHTBLUE_EX, LIGHTMAGENTA_EX, LIGHTCYAN_EX, LIGHTWHITE_EX\r\nBack: LIGHTBLACK_EX, LIGHTRED_EX, LIGHTGREEN_EX, LIGHTYELLOW_EX, LIGHTBLUE_EX, LIGHTMAGENTA_EX, LIGHTCYAN_EX, LIGHTWHITE_EX\r\n\r\nCursor Positioning\r\n\r\nANSI codes to reposition the cursor are supported. See demos/demo06.py for an example of how to generate them.\r\nInit Keyword Args\r\n\r\ninit() accepts some **kwargs to override default behaviour.\r\n\r\ninit(autoreset=False):\r\n\r\n    If you find yourself repeatedly sending reset sequences to turn off color changes at the end of every print, then init(autoreset=True) will automate that:\r\n\r\n    from colorama import init\r\n    init(autoreset=True)\r\n    print(Fore.RED + 'some red text')\r\n    print('automatically back to default color again')\r\n\r\ninit(strip=None):\r\n\r\n    Pass True or False to override whether ANSI codes should be stripped from the output. The default behaviour is to strip if on Windows or if output is redirected (not a tty).\r\ninit(convert=None):\r\n\r\n    Pass True or False to override whether to convert ANSI codes in the output into win32 calls. The default behaviour is to convert if on Windows and output is to a tty (terminal).\r\ninit(wrap=True):\r\n\r\n    On Windows, Colorama works by replacing sys.stdout and sys.stderr with proxy objects, which override the .write() method to do their work. If this wrapping causes you problems, then this can be disabled by passing init(wrap=False). The default behaviour is to wrap if autoreset or strip or convert are True.\r\n\r\n    When wrapping is disabled, colored printing on non-Windows platforms will continue to work as normal. To do cross-platform colored output, you can use Colorama\u00e2\u20ac\u2122s AnsiToWin32 proxy directly:\r\n\r\n    import sys\r\n    from colorama import init, AnsiToWin32\r\n    init(wrap=False)\r\n    stream = AnsiToWin32(sys.stderr).stream\r\n\r\n    # Python 2\r\n    print >>stream, Fore.BLUE + 'blue text on stderr'\r\n\r\n    # Python 3\r\n    print(Fore.BLUE + 'blue text on stderr', file=stream)\r\n\r\nRecognised ANSI Sequences\r\n\r\nANSI sequences generally take the form:\r\n\r\nESC [ <param> ; <param> ... <command>\r\n\r\nWhere <param> is an integer, and <command> is a single letter. Zero or more params are passed to a <command>. If no params are passed, it is generally synonymous with passing a single zero. No spaces exist in the sequence; they have been inserted here simply to read more easily.\r\n\r\nThe only ANSI sequences that Colorama converts into win32 calls are:\r\n\r\nESC [ 0 m       # reset all (colors and brightness)\r\nESC [ 1 m       # bright\r\nESC [ 2 m       # dim (looks same as normal brightness)\r\nESC [ 22 m      # normal brightness\r\n\r\n# FOREGROUND:\r\nESC [ 30 m      # black\r\nESC [ 31 m      # red\r\nESC [ 32 m      # green\r\nESC [ 33 m      # yellow\r\nESC [ 34 m      # blue\r\nESC [ 35 m      # magenta\r\nESC [ 36 m      # cyan\r\nESC [ 37 m      # white\r\nESC [ 39 m      # reset\r\n\r\n# BACKGROUND\r\nESC [ 40 m      # black\r\nESC [ 41 m      # red\r\nESC [ 42 m      # green\r\nESC [ 43 m      # yellow\r\nESC [ 44 m      # blue\r\nESC [ 45 m      # magenta\r\nESC [ 46 m      # cyan\r\nESC [ 47 m      # white\r\nESC [ 49 m      # reset\r\n\r\n# cursor positioning\r\nESC [ y;x H     # position cursor at x across, y down\r\nESC [ y;x f     # position cursor at x across, y down\r\nESC [ n A       # move cursor n lines up\r\nESC [ n B       # move cursor n lines down\r\nESC [ n C       # move cursor n characters forward\r\nESC [ n D       # move cursor n characters backward\r\n\r\n# clear the screen\r\nESC [ mode J    # clear the screen\r\n\r\n# clear the line\r\nESC [ mode K    # clear the line\r\n\r\nMultiple numeric params to the 'm' command can be combined into a single sequence:\r\n\r\nESC [ 36 ; 45 ; 1 m     # bright cyan text on magenta background\r\n\r\nAll other ANSI sequences of the form ESC [ <param> ; <param> ... <command> are silently stripped from the output on Windows.\r\n\r\nAny other form of ANSI sequence, such as single-character codes or alternative initial characters, are not recognised or stripped. It would be cool to add them though. Let me know if it would be useful for you, via the Issues on GitHub.\r\nStatus & Known Problems\r\n\r\nI\u00e2\u20ac\u2122ve personally only tested it on Windows XP (CMD, Console2), Ubuntu (gnome-terminal, xterm), and OS X.\r\n\r\nSome valid ANSI sequences aren\u00e2\u20ac\u2122t recognised.\r\n\r\nIf you\u00e2\u20ac\u2122re hacking on the code, see README-hacking.md. ESPECIALLY, see the explanation there of why we do not want PRs that allow Colorama to generate new types of ANSI codes.\r\n\r\nSee outstanding issues and wish-list: https://github.com/tartley/colorama/issues\r\n\r\nIf anything doesn\u00e2\u20ac\u2122t work for you, or doesn\u00e2\u20ac\u2122t do what you expected or hoped for, I\u00e2\u20ac\u2122d love to hear about it on that issues list, would be delighted by patches, and would be happy to grant commit access to anyone who submits a working patch or two.\r\nLicense\r\n\r\nCopyright Jonathan Hartley & Arnon Yaari, 2013-2020. BSD 3-Clause license; see LICENSE file.\r\nProfessional support\r\n\r\nTidelift\r\n\t\r\n\r\nProfessional support for colorama is available as part of the Tidelift Subscription. Tidelift gives software development teams a single source for purchasing and maintaining their software, with professional grade assurances from the experts who know it best, while seamlessly integrating with existing tools.\r\nThanks\r\n\r\nSee the CHANGELOG for more thanks!\r\n\r\n    Marc Schlaich (schlamar) for a setup.py fix for Python2.5.\r\n\r\n    Marc Abramowitz, reported & fixed a crash on exit with closed stdout, providing a solution to issue #7\u00e2\u20ac\u2122s setuptools/distutils debate, and other fixes.\r\n\r\n    User \u00e2\u20ac\u02dceryksun\u00e2\u20ac\u2122, for guidance on correctly instantiating ctypes.windll.\r\n\r\n    Matthew McCormick for politely pointing out a longstanding crash on non-Win.\r\n\r\n    Ben Hoyt, for a magnificent fix under 64-bit Windows.\r\n\r\n    Jesse at Empty Square for submitting a fix for examples in the README.\r\n\r\n    User \u00e2\u20ac\u02dcjamessp\u00e2\u20ac\u2122, an observant documentation fix for cursor positioning.\r\n\r\n    User \u00e2\u20ac\u02dcvaal1239\u00e2\u20ac\u2122, Dave Mckee & Lackner Kristof for a tiny but much-needed Win7 fix.\r\n\r\n    Julien Stuyck, for wisely suggesting Python3 compatible updates to README.\r\n\r\n    Daniel Griffith for multiple fabulous patches.\r\n\r\n    Oscar Lesta for a valuable fix to stop ANSI chars being sent to non-tty output.\r\n\r\n    Roger Binns, for many suggestions, valuable feedback, & bug reports.\r\n\r\n    Tim Golden for thought and much appreciated feedback on the initial idea.\r\n\r\n    User \u00e2\u20ac\u02dcZearin\u00e2\u20ac\u2122 for updates to the README file.\r\n\r\n    John Szakmeister for adding support for light colors\r\n\r\n    Charles Merriam for adding documentation to demos\r\n\r\n    Jurko for a fix on 64-bit Windows CPython2.5 w/o ctypes\r\n\r\n    Florian Bruhin for a fix when stdout or stderr are None\r\n\r\n    Thomas Weininger for fixing ValueError on Windows\r\n\r\n    Remi Rampin for better Github integration and fixes to the README file\r\n\r\n    Simeon Visser for closing a file handle using \u00e2\u20ac\u02dcwith\u00e2\u20ac\u2122 and updating classifiers to include Python 3.3 and 3.4\r\n\r\n    Andy Neff for fixing RESET of LIGHT_EX colors.\r\n\r\n    Jonathan Hartley for the initial idea and implementation.\r\n\r\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "milleday", "package_url": "https://pypi.org/project/milleday/", "platform": null, "project_url": "https://pypi.org/project/milleday/", "project_urls": {"Homepage": "https://github.com"}, "release_url": "https://pypi.org/project/milleday/1/", "requires_dist": ["requests", "colorama"], "requires_python": "", "summary": "Licensing content", "version": "1", "yanked": false, "yanked_reason": null}, "last_serial": 17962524, "releases": {"1": [{"comment_text": "", "digests": {"blake2b_256": "5ef8bf4b7c7a50a367fc6fbd870e23263788f64879206dbf004fea49da72dfb8", "md5": "eff1e5204a7d7a139218de5b7c8965da", "sha256": "6e733518bf46992e649debbfbfb112c896774dddfb2813efbdf8a379449354f5"}, "downloads": -1, "filename": "milleday-1-py3-none-any.whl", "has_sig": false, "md5_digest": "eff1e5204a7d7a139218de5b7c8965da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7914, "upload_time": "2023-05-03T20:31:24", "upload_time_iso_8601": "2023-05-03T20:31:24.764174Z", "url": "https://files.pythonhosted.org/packages/5e/f8/bf4b7c7a50a367fc6fbd870e23263788f64879206dbf004fea49da72dfb8/milleday-1-py3-none-any.whl", "yanked": false, "yanked_reason": null}, {"comment_text": "", "digests": {"blake2b_256": "09d082e6eab1dac5227cf7358ef83f78bcc55605903aa70c7e6acb611010b537", "md5": "070cb96c897a4f336263594b1dcac189", "sha256": "145acda331a55528f3413fb444544f20fb18f0af6461731f91181a2853e0fca9"}, "downloads": -1, "filename": "milleday-1.tar.gz", "has_sig": false, "md5_digest": "070cb96c897a4f336263594b1dcac189", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8791, "upload_time": "2023-05-03T20:31:28", "upload_time_iso_8601": "2023-05-03T20:31:28.574917Z", "url": "https://files.pythonhosted.org/packages/09/d0/82e6eab1dac5227cf7358ef83f78bcc55605903aa70c7e6acb611010b537/milleday-1.tar.gz", "yanked": false, "yanked_reason": null}]}, "urls": [{"comment_text": "", "digests": {"blake2b_256": "5ef8bf4b7c7a50a367fc6fbd870e23263788f64879206dbf004fea49da72dfb8", "md5": "eff1e5204a7d7a139218de5b7c8965da", "sha256": "6e733518bf46992e649debbfbfb112c896774dddfb2813efbdf8a379449354f5"}, "downloads": -1, "filename": "milleday-1-py3-none-any.whl", "has_sig": false, "md5_digest": "eff1e5204a7d7a139218de5b7c8965da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7914, "upload_time": "2023-05-03T20:31:24", "upload_time_iso_8601": "2023-05-03T20:31:24.764174Z", "url": "https://files.pythonhosted.org/packages/5e/f8/bf4b7c7a50a367fc6fbd870e23263788f64879206dbf004fea49da72dfb8/milleday-1-py3-none-any.whl", "yanked": false, "yanked_reason": null}, {"comment_text": "", "digests": {"blake2b_256": "09d082e6eab1dac5227cf7358ef83f78bcc55605903aa70c7e6acb611010b537", "md5": "070cb96c897a4f336263594b1dcac189", "sha256": "145acda331a55528f3413fb444544f20fb18f0af6461731f91181a2853e0fca9"}, "downloads": -1, "filename": "milleday-1.tar.gz", "has_sig": false, "md5_digest": "070cb96c897a4f336263594b1dcac189", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8791, "upload_time": "2023-05-03T20:31:28", "upload_time_iso_8601": "2023-05-03T20:31:28.574917Z", "url": "https://files.pythonhosted.org/packages/09/d0/82e6eab1dac5227cf7358ef83f78bcc55605903aa70c7e6acb611010b537/milleday-1.tar.gz", "yanked": false, "yanked_reason": null}], "vulnerabilities": []}