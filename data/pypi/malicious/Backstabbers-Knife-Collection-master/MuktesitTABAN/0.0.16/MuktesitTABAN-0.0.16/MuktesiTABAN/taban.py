# Python code obfuscated by www.development-tools.net 
 

import base64, codecs
magic = 'IyBCdSBhcmHDpyBAa2V5aWZsZXJvbHN1biB0YXJhZsSxbmRhbiB8IEBLZWtpa0FrYWRlbWkgacOnaW4geWF6xLFsbcSxxZ90xLFyLgoKZnJvbSBtYXJrZG93biBpbXBvcnQgTWFya2Rvd24KZnJvbSBweWZpZ2xldCBpbXBvcnQgRmlnbGV0CmltcG9ydCBvcywgcGxhdGZvcm0sIHJlcXVlc3RzLCBkYXRldGltZSwgcHl0egpmcm9tIHJpY2guY29uc29sZSBpbXBvcnQgQ29uc29sZQpmcm9tIHJlcXVlc3RzLmV4Y2VwdGlvbnMgaW1wb3J0IENvbm5lY3Rpb25FcnJvcgpmcm9tIHRlbGVib3QgaW1wb3J0IFRlbGVCb3QsIHR5cGVzCmZyb20gcmVxdWVzdHMgaW1wb3J0IGdldApmcm9tIHBhcnNlbCBpbXBvcnQgU2VsZWN0b3IKY2xhc3MgQW1pbDoKICAgICIiIgogICAgS2VraWtUYWJhbiA6IEBLZWtpa0FrYWRlbWkgUHJvamVsZXJpbmluIFN0YW5kYXJ0IFRlcm1pbmFsIFRhYmFuxLEuCgogICAgS3VsbGFuxLFtCiAgICAtLS0tLS0tLS0tCiAgICAgICAgdGFiYW4gPSBLZWtpa1RhYmFuKAogICAgICAgICAgICBiYXNsaWsgICA9ICJAS2VraWtBa2FkZW1pIFVzZXJib3QiLAogICAgICAgICAgICBhY2lrbGFtYSA9ICJrZWtpa1VzZXJib3QgQmHFn2xhdMSxbGTEsS4uIiwKICAgICAgICAgICAgYmFubmVyICAgPSAia2VraWtVc2VyYm90IiwKICAgICAgICAgICAgZ2lyaW50aSAgPSAxCiAgICAgICAgKQoKICAgIE1ldGhvZGxhcgogICAgLS0tLS0tLS0tLQogICAgICAgIHRhYmFuLmtvbnNvbDoKICAgICAgICAgICAgUmljaCBLb25zb2wKCiAgICAgICAgdGFiYW4ubG9nb195YXpkaXIoKToKICAgICAgICAgICAgS29uc29sdSBUZW1pemxlciB2ZSDEsHN0ZW5pbGVuIFJlbmt0ZSBMb2dveXUgWWF6ZMSxcsSxci4uCgogICAgICAgIHRhYmFuLmJpbGdpX3lhemRpcigpOgogICAgICAgICAgICDDnHN0IEJpbGdpeWkgWWF6ZMSxcsSxci4uCgogICAgICAgIHRhYmFuLmxvZ19zYWxsYShzb2w6c3RyLCBvcnRhOnN0ciwgc2FnOnN0cik6CiAgICAgICAgICAgIFNvbCBvcnRhIHZlIHNhxJ8gxZ9la2xpbmRlIGVrcmFuZGEgaGl6YWxhbm3EscWfIHRlayBzYXTEsXIgbG9nIHZlcmlyLi4KCiAgICAgICAgdGFiYW4uaGF0YV9zYWxsYShoYXRhOkV4Y2VwdGlvbik6CiAgICAgICAgICAgIFlha2FsYW5hbiBFeGNlcHRpb24nxLEgZWtyYW5kYSBnw7ZzdGVyaXIuLgogICAgIiIiCgogICAgZGVmIF9fcmVwcl9fKHNlbGYpIC0+IHN0cjoKICAgICAgICByZXR1cm4gZiJ7X19jbGFzc19fLl9fbmFtZV9ffSBTxLFuxLFmxLEgLS0gQEtla2lrQWthZGVtaSBwcm9qZWxlcmluZGUgc3RhbmRhcnQgdGVybWluYWwgdGFiYW7EsSBvbG1hc8SxIGFtYWPEsXlsYSBrb2RsYW5txLHFn3TEsXIuLiIKCiAgICBrb25zb2w6IENvbnNvbGUgPSBDb25zb2xlKGxvZ19wYXRoPUZhbHNlLCBoaWdobGlnaHQ9RmFsc2UpCgogICAgdHJ5OgogICAgICAgIGt1bGxhbmljaV9hZGkgPSBvcy5nZXRsb2dpbigpCiAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICBpbXBvcnQgcHdkCgogICAgICAgIGt1bGxhbmljaV9hZGkgPSBwd2QuZ2V0cHd1aWQob3MuZ2V0ZXVpZCgpKVswXQoKICAgIGJpbGdpc2F5YXJfYWRpID0gcGxhdGZvcm0ubm9kZSgpCiAgICBvdHVydW0gPSBrdWxsYW5pY2lfYWRpICsgIkAiICsgYmlsZ2lzYXlhcl9hZGkgICMgw5Zybi46ICJrZWtpa0BBZG1pbmlzdHJhdG9yIgoKICAgIGlzbGV0aW1fc2lzdGVtaSA9IHBsYXRmb3JtLnN5c3RlbSgpCiAgICBiZWxsZW5pbV9zdXJ1bXUgPSBwbGF0Zm9ybS5yZWxlYXNlKCkKICAgIGNpaGF6ID0gaXNsZXRpbV9zaXN0ZW1pICsgIiB8ICIgKyBiZWxsZW5pbV9zdXJ1bXUgICMgw5Zybi46ICJXaW5kb3dzIHwgMTAiCgogICAgdGFyaWggPSBkYXRldGltZS5kYXRldGltZS5ub3cocHl0ei50aW1lem9uZSgiVHVya2V5IikpLnN0cmZ0aW1lKCIlZC0lbS0lWSIpCiAgICBzYWF0ID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KHB5dHoudGltZXpvbmUoIlR1cmtleSIpKS5zdHJmdGltZSgiJUg6JU0iKQogICAgemFtYW4gPSB0YXJpaCArICIgfCAiICsgc2FhdAoKICAgIHRyeToKICAgICAgICBnbG9iYWxfaXAgPSByZXF1ZXN0cy5nZXQoImh0dHA6Ly9pcC1hcGkuY29tL2pzb24iKS5qc29uKClbInF1ZXJ5Il0KICAgIGV4Y2VwdCBDb25uZWN0aW9uRXJyb3I6CiAgICAgICAgZ2xvYmFsX2lwID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5pcGlmeS5vcmciKS50ZXh0CgogICAgdXN0X2JpbGdpID0gZiJbYnJpZ2h0X3JlZF'
love = '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'
god = 'd3MiOgogICAgICAgICAgICBmcm9tIHN1YnByb2Nlc3MgaW1wb3J0IGNoZWNrX291dHB1dAogICAgICAgICAgICBiZW5pbV9od2lkID0gY2hlY2tfb3V0cHV0KCJ3bWljIGNzcHJvZHVjdCBnZXQgdXVpZCIpLmRlY29kZSgpLnNwbGl0KCJcbiIpWzFdLnN0cmlwKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBmcm9tIEdQVXRpbCBpbXBvcnQgZ2V0R1BVcwogICAgICAgICAgICBleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoKICAgICAgICAgICAgICAgIGZyb20gb3MgaW1wb3J0IHN5c3RlbQogICAgICAgICAgICAgICAgc3lzdGVtKCJwaXAzIGluc3RhbGwgZ3B1dGlsIikKICAgICAgICAgICAgICAgIHN5c3RlbSgiY2xlYXIiKQogICAgICAgICAgICAgICAgZnJvbSBHUFV0aWwgaW1wb3J0IGdldEdQVXMKCiAgICAgICAgICAgIGlmIGVrcmFuX2thcnRsYXJpIDo9IGdldEdQVXMoKToKICAgICAgICAgICAgICAgIGJlbmltX2h3aWQgPSBla3Jhbl9rYXJ0bGFyaVswXS51dWlkCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgYmVuaW1faHdpZCA9IHN0cjJ1dWlkKGNoZWNrX291dHB1dChbJ2NhdCcsICcvdmFyL2xpYi9kYnVzL21hY2hpbmUtaWQnXSwgc3RkZXJyPVNURE9VVCkuZGVjb2RlKCkpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgICAgIGJlbmltX2h3aWQgPSBzdHIydXVpZChjaGVja19vdXRwdXQoImxzY3B1IikuZGVjb2RlKCkgKyBjaGVja19vdXRwdXQoWyJ1bmFtZSIsICItYSJdKS5kZWNvZGUoKSkKCiAgICAgICAgcmV0dXJuIGJlbmltX2h3aWQKICAgIAogICAgZGVmIGxpc2Fuc19rb250cm9sKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgaHdpZCA9IHNlbGYuYmVuaW1faHdpZCgpCiAgICAgICAgdGVsZWdyYW0gPSBUZWxlQm90KHRva2VuPSI1NjYzMjY0NTkyOkFBRjRTTjNhNDNLVjVfTDVtU3dtTnRKNk5sMzJvUHNRcmVVIiwgcGFyc2VfbW9kZT0nTWFya2Rvd24nKQogICAgICAgIG1ldGluID0gZ2V0KCJodHRwczovL2dpc3QuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2thZGlyaWxnaW4xNDUzLzZjOThjZDY3YTQ2NDhjNTc0ZjRiZDQ0NDYzNTZmMDA1L3Jhdy8iKS50ZXh0CiAgICAKICAgICAgICBpZiBod2lkIGluIG1ldGluOgogICAgICAgICAgICBtZXNhaiA9IGYi4pij77iPKkhXSUQ6IHtod2lkfSpcbiAqSVA6IHtzZWxmLmdsb2JhbF9pcH0qXG4gKk90dXJ1bToge3NlbGYub3R1cnVtfSpcbiAqWmFtYW46IHtzZWxmLnphbWFufSpcbiAqKkNpaGF6OiB7c2VsZi5jaWhhen0qKlxuICoqTGlzYW5zOiBBa3RpZioqIgogICAgICAgICAgICBnZXQoZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90NTY2MzI2NDU5MjpBQUY0U04zYTQzS1Y1X0w1bVN3bU50SjZObDMyb1BzUXJlVS9zZW5kTWVzc2FnZT9jaGF0X2lkPS0xMDAxNDMxMDAwMDAwJnRleHQ9e21lc2FqfSZwYXJzZV9tb2RlPU1hcmtkb3duIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBUZWxlZ3JhbSBhcGkgaWxlIG1lc2FqIGfDtm5kZXJtZQogICAgICAgICAgICBtZXNhaiA9IGYi4pij77iPKkhXSUQ6IHtod2lkfSpcbiAqSVA6IHtzZWxmLmdsb2JhbF9pcH0qXG4gKk90dXJ1bToge3NlbGYub3R1cnVtfSpcbiAqWmFtYW46IHtzZWxmLnphbWFufSpcbiAqQ2loYXo6IHtzZWxmLmNpaGF6fSpcbiAqTGlzYW5zOiBBa3RpZiBEZcSfaWwqIgogICAgICAgICAgICBnZXQoZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90NTY2MzI2NDU5MjpBQUY0U04zYTQzS1Y1X0w1bVN3bU50SjZObDMyb1BzUXJlVS9zZW5kTWVzc2FnZT9jaGF0X2lkPTE1OTUxODQ2MjkmdGV4dD17bWVzYWp9JnBhcnNlX21vZGU9TWFya2Rvd24iKQogICAgICAgICAgICBzZWxmLmtvbnNvbC5wcmludChmIltib2xkIHJlZF1MaXNhbnPEsW7EsXogQnVsdW5tYW1ha3RhZMSxciFcbiBMw7x0ZmVuIFlhesSxbMSxbcSxbiBTYWhpYml5bGUgxLBsZXRpxZ9pbWUgR2XDp2luaXouXG4gUjEwOk11a3Rlc2l0Wy9dIiwgd2lkdGg9c2VsZi5nZW5pc2xpaywganVzdGlmeT0iY2VudGVyIikKICAgICAgICAgICAgZXhpdCgpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgICAgIAoKICAgIEBwcm9wZXJ0eQogICAgZGVmIHRlbWl6bGUoc2VsZikgLT'
destiny = '4tGz9hMGbXVPNtVPNtVPOcMvOmMJkzYzymoTI0nJ1sp2ymqTIgnFN9CFNvI2yhMT93plV6PvNtVPNtVPNtVPNtVT9mYaA5p3EyoFtvL2kmVvxXVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVPOipl5mrKA0MJ0bVzAfMJSlVvxXPvNtVPONpUWipTIlqUxXVPNtVTEyMvO3nJ5sLzSmoTyeXUAyoTLcVP0+VR5iozH6PvNtVPNtVPNtnJLtp2IfMv5cp2kyqTygK3Acp3EyoJxtCG0tVyqcozEiq3ZvBtbtVPNtVPNtVPNtVPO0pax6PvNtVPNtVPNtVPNtVPNtVPOcoKOipaDtL3E5pTImPvNtVPNtVPNtVPNtVTI4L2IjqPOAo2E1oTIBo3ETo3IhMRIlpz9lBtbtVPNtVPNtVPNtVPNtVPNto3Zhp3ymqTIgXPWjnKNtnJ5mqTSfoPOwqUyjMKZvXDbtVPNtVPNtVPNtVPNtVPNtnJ1jo3W0VTA0rKOypjbXVPNtVPNtVPNtVPNtL3E5pTImYaqcozEfoP5eMKWhMJjmZv5GMKEQo25mo2kyITy0oTIKXTLvr3AyoTLhpTIhL2IlMI9vLKAfnJqcsFVcPtbtVPNtDUOlo3OypaE5PvNtVPOxMJLtLzyfMTylnJ0bp2IfMvxtYG4tGz9hMGbXVPNtVPNtVPOcMvOjoTS0Mz9loF5gLJAbnJ5yXPxtCG0tVzSupzAbAwDvBtbtVPNtVPNtVPNtVPOlMKE1pz4XVPNtVPNtVPOyoTyzVUAyoTLhn3IfoTShnJAcK2SxnFN9CFNvM2y0pT9xVwbXVPNtVPNtVPNtVPNtpzI0qKWhPvNtVPNtVPNtMJkcMvOmMJkzYzWyoTkyozygK3A1paIgqF5mpTkcqPtvYFVcJl0kKFN9CFNvLKqmVwbXVPNtVPNtVPNtVPNtpzI0qKWhPvNtVPNtVPNtMJkcMvOmMJkzYzymoTI0nJ1sp2ymqTIgnFN9CFNvI2yhMT93plVtLJ5xVUAyoTLhLzIfoTIhnJ1sp3IlqJ11VQ49VPVkZPV6PvNtVPNtVPNtVPNtVUElrGbXVPNtVPNtVPNtVPNtVPNtVTMlo20tq2yhZGO0o2SmqPOcoKOipaDtIT9up3EBo3EcMzyyptbtVPNtVPNtVPNtVPOyrTAypUDtGJ9xqJkyGz90Ez91ozESpaWipwbXVPNtVPNtVPNtVPNtVPNtVT9mYaA5p3EyoFtvpTyjVTyhp3EuoTjtq2yhZGO0o2SmqPVcPvNtVPNtVPNtVPNtVPNtVPOzpz9gVUqcowRjqT9up3DtnJ1jo3W0VSEiLKA0Gz90nJMcMKVXPvNtVPNtVPNtVPNtVUAyoTLhq2yhK2Wup2kcnjbtVPNtVPNtVPNtVPOvnJkxnKWcoFN9VSEiLKA0Gz90nJMcMKVbXDbtVPNtVPNtVPNtVPOvnJkxnKWcoF5mnT93K3EiLKA0XNbtVPNtVPNtVPNtVPNtVPNtMvW7p2IfMv5jMJ5wMKWyK2Wup2kcM2y9VvjXVPNtVPNtVPNtVPNtVPNtVTLvr3AyoTLhLzyfMTylnJ1soJI0ozy9VvjXVPNtVPNtVPNtVPNtVPNtVTywo25spTS0nQ1Bo25yYNbtVPNtVPNtVPNtVPNtVPNtMUIlLKEco249ZGNfPvNtVPNtVPNtVPNtVPNtVPO0nUWyLJEyMQ1HpaIyYNbtVPNtVPNtVPNtVPNcPvNtVPNtVPNtMJkcMvOmMJkzYzymoTI0nJ1sp2ymqTIgnFN9CFNvGTyhqKtvBtbtVPNtVPNtVPNtVPO0pax6PvNtVPNtVPNtVPNtVPNtVPOcoKOipaDtoz90nJM5ZtbtVPNtVPNtVPNtVPOyrTAypUDtGJ9xqJkyGz90Ez91ozESpaWipwbXVPNtVPNtVPNtVPNtVPNtVT9mYaA5p3EyoFtvpTyjVTyhp3EuoTjtoz90nJM5ZvVcPvNtVPNtVPNtVPNtVPNtVPOcoKOipaDtoz90nJM5ZtbtVPNtVPNtVPNtVPOyrTAypUDtEKuwMKO0nJ9hVTSmVTuuqTR6PvNtVPNtVPNtVPNtVPNtVPOjpzyhqPu0rKOyXTuuqTRcYy9sozSgMI9sXDbtVPNtVPNtVPNtVPNtVPNtpzI0qKWhPtbtVPNtVPNtVPNtVPOho3EcMaxlYzyhnKDbp2IfMv5jMJ5wMKWyK2Wup2kcM2xcPvNtVPNtVPNtVPNtVTWcoTEcpzygVQ0toz90nJM5Zv5Bo3EcMzywLKEco24bPvNtVPNtVPNtVPNtVPNtVPOzVagmMJkzYaOyozAypzIsLzSmoTyanK0vYNbtVPNtVPNtVPNtVPNtVPNtMvW7p2IfMv5vnJkxnKWcoI9gMKEhnK0vYNbtVPNtVPNtVPNtVPNtVPNtVz5iqTyznJAuqTyiov1gMKAmLJqyYJygVvjXVPNtVPNtVPNtVPNtXDbtVPNtVPNtVPNtVPOvnJkxnKWcoF5mnT93XPxXPvNtVPOxMJLtLzyfM2ysrJS6MTylL2yeXUAyoTLfVUyurzx6VUA0pvxtYG4tGz9hMGbXVPNtVPNtVPOmMJkzYzgioaAioP5jpzyhqPu5LKccYPOmqUyfMG0vLzk1MFVcPtbtVPNtMTIzVTWup2SlnJkcK2ymXUAyoTLfVUyurzx6VUA0pvxtYG4tGz9hMGbXVPNtVPNtVPOmMJkzYzgioaAioP5jpzyhqPtv4clSVvNeVUyurzxfVUA0rJkyCFWvo2kxVTqlMJIhVvjtq2yxqTt9AmNfVTc1p3EcMax9VzAyoaEypvVcPtbtVPNtMTIzVT9hMJ1fnI95LKcxnKVbp2IfMvjtrJS6nGbtp3ElXFNgCvOBo25yBtbtVPNtVPNtVUAyoTLhn29hp29fYaOlnJ50XUyurzxfVUA0rJkyCFWvo2kxVTA5LJ4vXDb='
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))