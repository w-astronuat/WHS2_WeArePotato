import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChanges, ViewContainerRef } from '@angular/core';
import { DialogService } from '../../..//controls/services/dialog/dialog-service';
import { ColumnGroup } from '../../../objects/request/column-group';
import { Dictionary } from '../../../objects/dictionary';
import { GridSelectionMode } from '../../../objects/enums/grid-selection-mode';
import { ColumnFilter } from '../../../controls/components/grid/filters/column-filter';
import { ColumnSort } from '../../../controls/components/grid/sorting/column-sort';
import { ColumnGrouping } from '../../../objects/request/column-grouping';
import { Column } from '../../../objects/request/column';
import { GridCell } from '../../../controls/components/grid/grid-cell/grid-cell';
import { SortDirection } from '../../../objects/enums/sort-direction';
export declare class GridComponent implements OnChanges, OnInit {
    private changeDetectorRef;
    private viewContainerRef;
    private dialog;
    constructor(changeDetectorRef: ChangeDetectorRef, viewContainerRef: ViewContainerRef, dialog: DialogService);
    GridClass: string;
    SelectedCell: any;
    SelectedRow: any;
    SelectedRowChange: EventEmitter<any>;
    SelectedCells: any;
    SelectedRows: any;
    RowFocus: any;
    ColumnFocus: any;
    HeightPx: any;
    WidthPx: any;
    PanelWidthPx: any;
    FrozenColumnCount: number;
    HierarchyColumnIndex: number;
    HierarchyColumnProperty: any;
    ShowRowNumbers: boolean;
    ShowFooter: boolean;
    ShowColumnGroups: boolean;
    ColumnGroups: Dictionary<ColumnGroup>;
    ContextMenu: any;
    LastColumnFill: boolean;
    HideRowResize: boolean;
    CalculateRowSize: Function;
    CellMouseOver: string;
    RowMouseOver: string;
    GridSelectionMode: GridSelectionMode;
    IsBusy: boolean;
    BusyMessage: string;
    gridRowVerticalContainer: any;
    gridRowHorizontalContainer: any;
    gridColumnHorizontalContainer: any;
    gridColumnGroupContainer: any;
    gridFooterContainer: any;
    gridTableScrollbarHorizontalContainer: any;
    gridTableScrollbarVerticalContainer: any;
    gridTableScrollbarHorizontalScrollPanel: any;
    TopHeightPx: string;
    TransformY: string;
    readonly Grid: GridComponent;
    Rows: Array<any>;
    VisibleRows: Array<any>;
    RowNumbers: Array<any>;
    private el;
    ScrollTop: any;
    ScrollLeft: any;
    ContainerHeight: any;
    ContainerWidth: any;
    VisibleColumns: Array<any>;
    Filters: Dictionary<ColumnFilter>;
    Sorts: Dictionary<ColumnSort>;
    ColumnGroupings: Array<ColumnGrouping>;
    private itemsSource;
    ItemsSource: Array<any>;
    private columns;
    Columns: Dictionary<Column>;
    private rowHeight;
    RowHeight: number;
    private columnHeaderHeight;
    ColumnHeaderHeight: number;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngOnChanges(changes: SimpleChanges): void;
    readonly RegularColumns: Array<Column>;
    readonly FrozenColumns: Array<Column>;
    readonly RegularColumnGroupings: Array<ColumnGrouping>;
    readonly FrozenColumnGroupings: Array<ColumnGrouping>;
    readonly FrozenColumnWidthPx: number;
    readonly VerticalScrollbarTopPx: number;
    readonly VerticalScrollbarBottomPx: number;
    createCollectionView(): void;
    onVerticalScroll(event: any): void;
    private handleVerticalScroll(scrollTop);
    private getViewPortStartIndex();
    private getViewPortEndIndex(startIndex);
    onHorizontalScroll(event: any): void;
    private handleHorizontalScroll(scrollLeft);
    calculateWidth(): void;
    SizeHorizontalScrollbar(): void;
    getAllItems(items: Array<any>): Array<any>;
    calculateRowHeights(items: Array<any>): void;
    showSettings(): void;
    mouseWheelUp(event: any): void;
    mouseWheelDown(event: any): void;
    ExportToExcel(): void;
    SetRowFocus(row: any): void;
    SetColumnFocus(row: any, column: any): void;
    SelectRow(row: any): void;
    SelectCell(cell: GridCell): void;
    ExpandCollapseHierarchyRow(row: any): void;
    ShowHideColumn(column: Column): void;
    ResizeColumn(column: Column): void;
    ResizeRow(row: any): void;
    SetFilter(column: Column, filterValue: string, searchType: number, selectedDistinctValues: Array<any>): void;
    ClearFilter(column: Column): void;
    SetSort(column: Column, direction: SortDirection): void;
    ToggleSort(column: Column): void;
    ExpandAll(): void;
    CollapseAll(): void;
    ToggleHighlightRow(row: any): void;
    RaiseChange(): void;
    RefreshGrid(): void;
    readonly IsDevMode: boolean;
}
