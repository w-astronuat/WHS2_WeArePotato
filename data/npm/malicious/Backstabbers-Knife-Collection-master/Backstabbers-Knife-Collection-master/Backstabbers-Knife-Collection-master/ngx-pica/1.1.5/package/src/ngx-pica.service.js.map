{"version":3,"file":"ngx-pica.service.js","sourceRoot":"","sources":["../../src/ngx-pica.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {NgxPicaErrorInterface, NgxPicaErrorType} from './ngx-pica-error.interface';\nimport {NgxPicaResizeOptionsInterface} from './ngx-pica-resize-options.interface';\nimport {NgxPicaExifService} from './ngx-pica-exif.service';\nimport pica from 'pica/dist/pica';\n\ndeclare let window: any;\n\n@Injectable()\nexport class NgxPicaService {\n    private picaResizer = new pica();\n    private MAX_STEPS: number = 20;\n\n    constructor(private _ngxPicaExifService: NgxPicaExifService) {\n        if (!this.picaResizer || !this.picaResizer.resize) {\n            this.picaResizer = new window.pica();\n        }\n    }\n\n    /**\n     * Resize images array\n     * @param {File[]} files\n     * @param {number} width\n     * @param {number} height\n     * @param {NgxPicaResizeOptionsInterface} options\n     * @returns {Observable<File>}\n     */\n    public resizeImages(files: File[], width: number, height: number, options?: NgxPicaResizeOptionsInterface): Observable<File> {\n        const resizedImage: Subject<File> = new Subject();\n        const totalFiles: number = files.length;\n\n        if (totalFiles > 0) {\n            const nextFile: Subject<File> = new Subject();\n            let index: number = 0;\n\n            const subscription: Subscription = nextFile.subscribe((file: File) => {\n                this.resizeImage(file, width, height, options).subscribe(imageResized => {\n                    index++;\n                    resizedImage.next(imageResized);\n\n                    if (index < totalFiles) {\n                        nextFile.next(files[index]);\n\n                    } else {\n                        resizedImage.complete();\n                        subscription.unsubscribe();\n                    }\n                }, (err) => {\n                    const ngxPicaError: NgxPicaErrorInterface = {\n                        file: file,\n                        err: err\n                    };\n\n                    resizedImage.error(ngxPicaError);\n                });\n            });\n\n            nextFile.next(files[index]);\n        } else {\n            const ngxPicaError: NgxPicaErrorInterface = {\n                err: NgxPicaErrorType.NO_FILES_RECEIVED\n            };\n\n            resizedImage.error(ngxPicaError);\n            resizedImage.complete();\n        }\n\n        return resizedImage.asObservable();\n    }\n\n    /**\n     * Resize image file\n     *\n     * @param {File} file\n     * @param {number} width\n     * @param {number} height\n     * @param {NgxPicaResizeOptionsInterface} options\n     * @returns {Observable<File>}\n     */\n    public resizeImage(file: File, width: number, height: number, options?: NgxPicaResizeOptionsInterface): Observable<File> {\n        const resizedImage: Subject<File> = new Subject();\n        const originCanvas: HTMLCanvasElement = document.createElement('canvas');\n        const ctx = originCanvas.getContext('2d');\n        const img = new Image();\n\n        if (ctx) {\n            img.onload = () => {\n                this._ngxPicaExifService.getExifOrientedImage(img).then(orientedImage => {\n                    window.URL.revokeObjectURL(img.src);\n                    originCanvas.width = orientedImage.width;\n                    originCanvas.height = orientedImage.height;\n\n                    ctx.drawImage(orientedImage, 0, 0);\n\n                    let imageData = ctx.getImageData(0, 0, orientedImage.width, orientedImage.height);\n                    if (options && options.aspectRatio && options.aspectRatio.keepAspectRatio) {\n                        let ratio = 0;\n\n                        if (options.aspectRatio.forceMinDimensions) {\n                            ratio = Math.max(width / imageData.width, height / imageData.height);\n                        } else {\n                            ratio = Math.min(width / imageData.width, height / imageData.height);\n                        }\n\n                        width = Math.round(imageData.width * ratio);\n                        height = Math.round(imageData.height * ratio);\n                    }\n\n                    const destinationCanvas: HTMLCanvasElement = document.createElement('canvas');\n                    destinationCanvas.width = width;\n                    destinationCanvas.height = height;\n\n                    this.picaResize(file, originCanvas, destinationCanvas, options)\n                        .catch((err) => resizedImage.error(err))\n                        .then((imgResized: File) => {\n                            resizedImage.next(imgResized);\n                        });\n                });\n            };\n\n            img.src = window.URL.createObjectURL(file);\n        } else {\n            resizedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);\n        }\n\n        return resizedImage.asObservable();\n    }\n\n    /**\n     * Compress images array\n     *\n     * @param {File[]} files\n     * @param {number} sizeInMB\n     * @returns {Observable<File>}\n     */\n    public compressImages(files: File[], sizeInMB: number): Observable<File> {\n        const compressedImage: Subject<File> = new Subject();\n        const totalFiles: number = files.length;\n\n        if (totalFiles > 0) {\n            const nextFile: Subject<File> = new Subject();\n            let index: number = 0;\n\n            const subscription: Subscription = nextFile.subscribe((file: File) => {\n                this.compressImage(file, sizeInMB).subscribe(imageCompressed => {\n                    index++;\n                    compressedImage.next(imageCompressed);\n\n                    if (index < totalFiles) {\n                        nextFile.next(files[index]);\n\n                    } else {\n                        compressedImage.complete();\n                        subscription.unsubscribe();\n                    }\n                }, (err) => {\n                    const ngxPicaError: NgxPicaErrorInterface = {\n                        file: file,\n                        err: err\n                    };\n\n                    compressedImage.error(ngxPicaError);\n                });\n            });\n\n            nextFile.next(files[index]);\n        } else {\n            const ngxPicaError: NgxPicaErrorInterface = {\n                err: NgxPicaErrorType.NO_FILES_RECEIVED\n            };\n\n            compressedImage.error(ngxPicaError);\n            compressedImage.complete();\n        }\n\n        return compressedImage.asObservable();\n    }\n\n    /**\n     * Compress image file\n     *\n     * @param {File} file\n     * @param {number} sizeInMB\n     * @returns {Observable<File>}\n     */\n    public compressImage(file: File, sizeInMB: number): Observable<File> {\n        const compressedImage: Subject<File> = new Subject();\n\n        if (this.bytesToMB(file.size) <= sizeInMB) {\n            setTimeout(() => {\n                compressedImage.next(file);\n            });\n        } else {\n\n            const originCanvas: HTMLCanvasElement = document.createElement('canvas');\n            const ctx = originCanvas.getContext('2d');\n            const img = new Image();\n\n            if (ctx) {\n                img.onload = () => {\n                    this._ngxPicaExifService.getExifOrientedImage(img).then(orientedImage => {\n                        window.URL.revokeObjectURL(img.src);\n                        originCanvas.width = orientedImage.width;\n                        originCanvas.height = orientedImage.height;\n\n                        ctx.drawImage(orientedImage, 0, 0);\n\n                        this.getCompressedImage(originCanvas, file.type, 1, sizeInMB, 0)\n                            .catch((err) => compressedImage.error(err))\n                            .then((blob: Blob) => {\n                                let imgCompressed: File = this.blobToFile(blob, file.name, file.type, new Date().getTime());\n\n                                compressedImage.next(imgCompressed);\n                            });\n                    });\n                };\n\n                img.src = window.URL.createObjectURL(file);\n            } else {\n                compressedImage.error(NgxPicaErrorType.CANVAS_CONTEXT_IDENTIFIER_NOT_SUPPORTED);\n            }\n        }\n\n        return compressedImage.asObservable();\n    }\n\n    /**\n     * Through Pica toBlob method, compress image file\n     *\n     * @param {HTMLCanvasElement} canvas\n     * @param {string} type\n     * @param {number} quality\n     * @param {number} sizeInMB\n     * @param {number} step\n     * @returns {Promise<Blob>}\n     */\n    private getCompressedImage(canvas: HTMLCanvasElement, type: string, quality: number, sizeInMB: number, step: number): Promise<Blob> {\n        return new Promise<Blob>((resolve, reject) => {\n            this.picaResizer.toBlob(canvas, type, quality)\n                .catch((err) => reject(err))\n                .then((blob: Blob) => {\n                    this.checkCompressedImageSize(canvas, blob, quality, sizeInMB, step)\n                        .catch((err) => reject(err))\n                        .then((blob: Blob) => {\n                                resolve(blob);\n                            }\n                        )\n                });\n        });\n    }\n\n    /**\n     * Check if image has been compressed enough\n     *\n     * @param {HTMLCanvasElement} canvas\n     * @param {Blob} blob\n     * @param {number} quality\n     * @param {number} sizeInMB\n     * @param {number} step\n     * @returns {Promise<Blob>}\n     */\n    private checkCompressedImageSize(canvas: HTMLCanvasElement, blob: Blob, quality: number, sizeInMB: number, step: number): Promise<Blob> {\n        return new Promise<Blob>((resolve, reject) => {\n\n            if (step > this.MAX_STEPS) {\n                reject(NgxPicaErrorType.NOT_BE_ABLE_TO_COMPRESS_ENOUGH);\n            }\n\n            if (this.bytesToMB(blob.size) < sizeInMB) {\n                resolve(blob);\n            } else {\n                const newQuality: number = quality - (quality * 0.1);\n                const newStep: number = step + 1;\n\n                // recursively compression\n                resolve(this.getCompressedImage(canvas, blob.type, newQuality, sizeInMB, newStep));\n            }\n        });\n    }\n\n    /**\n     * Through Pica resize method, resize image file\n     *\n     * @param {File} file\n     * @param {HTMLCanvasElement} from\n     * @param {HTMLCanvasElement} to\n     * @param options\n     * @returns {Promise<File>}\n     */\n    private picaResize(file: File, from: HTMLCanvasElement, to: HTMLCanvasElement, options: any): Promise<File> {\n        return new Promise<File>((resolve, reject) => {\n            this.picaResizer.resize(from, to, options)\n                .catch((err) => reject(err))\n                .then((resizedCanvas: HTMLCanvasElement) => this.picaResizer.toBlob(resizedCanvas, file.type))\n                .then((blob: Blob) => {\n                    let fileResized: File = this.blobToFile(blob, file.name, file.type, new Date().getTime());\n                    resolve(fileResized);\n                });\n        });\n    }\n\n    /**\n     * Return new File from Blob\n     *\n     * @param {Blob} blob\n     * @param {string} name\n     * @param {string} type\n     * @param {number} lastModified\n     * @returns {File}\n     */\n    private blobToFile(blob: Blob, name: string, type: string, lastModified: number): File {\n        return new File([blob], name, {type: type, lastModified: lastModified});\n    }\n\n    /**\n     * Convert bytes to MegaBytes\n     *\n     * @param {number} bytes\n     * @returns {number}\n     */\n    private bytesToMB(bytes: number) {\n        return bytes / 1048576;\n    }\n}"]}