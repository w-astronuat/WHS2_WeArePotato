Assert (16),Async Hooks (5),Buffer (67),C++ Addons (1),Child Process (12),Cluster (9),Console (25),Crypto (72),DNS (37),Errors (2),Events (16),File System (130),HTTP (28),HTTP/2 (43),HTTPS (9),Inspector (6),Modules (4),Net (41),OS (17),Path (11),Performance Timing API (11),Process (30),Query String (4),Readline (13),REPL (5),Stream (36),String Decoder (2),Timers (11),TLS (SSL) (25),Trace Events (4),TTY (3),UDP/Datagram Sockets (20),URL (22),Util (71),V8 (27),VM (Executing JavaScript) (14),Worker Threads (9),Zlib (24)
"assert(value[, message])",async_hooks.createHook(callbacks),"buffer.transcode(source, fromEnc, toEnc)","void AtExit(callback, args)","child_process.exec(command[, options][, callback])",· cluster.disconnect([callback]),"console.assert(value[, ...message])",Certificate.exportChallenge(spkac),resolver.cancel(),new Error(message),"EventEmitter.listenerCount(emitter, eventName)",dirent.isBlockDevice(),new Agent([options]),http2session.close([callback]),server.close([callback]),inspector.close(),require(),"new net.Server([options][, connectionListener])",os.arch(),"path.basename(path[, ext])",performance.clearMarks([name]),process.abort(),querystring.escape(str),rl.close(),"replServer.defineCommand(keyword, cmd)",writable.cork(),stringDecoder.end([buffer]),immediate.ref(),"server.addContext(hostname, context)",tracing.disable(),readStream.setRawMode(mode),"socket.addMembership(multicastAddress[, multicastInterface])",url.toString(),util.callbackify(original),v8.cachedDataVersionTag(),module.evaluate([options]),port.close(),zlib.close([callback])
"assert.deepEqual(actual, expected[, message])",asyncHook.enable(),"Class Method: Buffer.alloc(size[, fill[, encoding]])",,"child_process.execFile(file[, args][, options][, callback])",· cluster.fork([env]),console.clear(),"Certificate.exportPublicKey(spkac[, encoding])",dns.getServers(),"Error.captureStackTrace(targetObject[, constructorOpt])","emitter.addListener(eventName, listener)",dirent.isCharacterDevice(),"agent.createConnection(options[, callback])","http2session.destroy([error][, code])",server.listen(),"inspector.open([port[, host[, wait]]])",module.require(id),server.address(),os.cpus(),path.dirname(path),performance.mark([name]),process.chdir(directory),"querystring.parse(str[, sep[, eq[, options]]])",rl.pause(),replServer.displayPrompt([preserveCursor]),writable.destroy([error]),stringDecoder.write(buffer),immediate.unref(),server.address(),tracing.enable(),writeStream.getColorDepth([env]),socket.address(),url.toJSON(),util.debuglog(section),v8.getHeapSpaceStatistics(),module.instantiate(),"port.postMessage(value[, transferList])","zlib.flush([kind, ]callback)"
"assert.deepStrictEqual(actual, expected[, message])",asyncHook.disable(),Class Method: Buffer.allocUnsafe(size),,"child_process.fork(modulePath[, args][, options])",· cluster.setupMaster([settings]),console.count([label]),Certificate.verifySpkac(spkac),"dns.lookup(hostname[, options], callback)",,"emitter.emit(eventName[, ...args])",dirent.isDirectory(),agent.keepSocketAlive(socket),"http2session.goaway([code[, lastStreamID[, opaqueData]]])",,inspector.url(),"require.resolve(request[, options])",server.close([callback]),os.endianness(),path.extname(path),"performance.measure(name, startMark, endMark)",process.cpuUsage([previousValue]),"querystring.stringify(obj[, sep[, eq[, options]]])",rl.prompt([preserveCursor]),replServer.clearBufferedCommand(),"writable.end([chunk][, encoding][, callback])",,timeout.ref(),server.close([callback]),trace_events.createTracing(options),tty.isatty(fd),"socket.bind([port][, address][, callback])","urlSearchParams.append(name, value)","util.deprecate(fn, msg[, code])",v8.getHeapStatistics(),module.link(linker),port.ref(),"zlib.params(level, strategy, callback)"
"assert.doesNotReject(block[, error][, message])",async_hooks.executionAsyncId(),Class Method: Buffer.allocUnsafeSlow(size),,"child_process.spawn(command[, args][, options])",· worker.disconnect(),console.countReset([label]),new crypto.Certificate(),"dns.lookupService(address, port, callback)",,emitter.eventNames(),dirent.isFIFO(),"agent.reuseSocket(socket, request)","http2session.ping([payload, ]callback)","server.setTimeout([msecs][, callback])",session.connect(),require.resolve.paths(request),server.connections,os.freemem(),path.format(pathObject),performance.now(),process.cwd(),querystring.unescape(str),"rl.question(query, callback)","replServer.parseREPLKeyword(keyword[, rest])",writable.setDefaultEncoding(encoding),,timeout.refresh(),server.getTicketKeys(),trace_events.getEnabledCategories(),,"socket.bind(options[, callback])",urlSearchParams.delete(name),"util.format(format[, ...args])",v8.setFlagsFromString(flags),"new vm.Script(code, options)",port.start(),zlib.createDeflate([options])
"assert.doesNotThrow(block[, error][, message])",async_hooks.triggerAsyncId(),"Class Method: Buffer.byteLength(string[, encoding])",,"child_process.execFileSync(file[, args][, options])",· worker.exitedAfterDisconnect,"console.debug(data[, ...args])",certificate.exportChallenge(spkac),"dns.resolve(hostname[, rrtype], callback)",,emitter.getMaxListeners(),dirent.isFile(),agent.destroy(),http2session.ref(),"https.createServer([options][, requestListener])",session.disconnect(),,server.getConnections(callback),os.getPriority([pid]),path.isAbsolute(path),performance.timerify(fn),process.disconnect(),,rl.resume(),repl.start([options]),writable.uncork(),,timeout.unref(),server.listen(),,,socket.close([callback]),urlSearchParams.entries(),"util.formatWithOptions(inspectOptions, format[, ...args])",v8.serialize(value),script.createCachedData(),port.unref(),zlib.createDeflateRaw([options])
"assert.equal(actual, expected[, message])",,"Class Method: Buffer.compare(buf1, buf2)",,"child_process.execSync(command[, options])",· worker.isConnected(),"console.dir(obj[, options])",certificate.exportPublicKey(spkac),"dns.resolve4(hostname[, options], callback)",,emitter.listenerCount(eventName),dirent.isSocket(),agent.getName(options),http2session.remoteSettings,"https.get(options[, callback])","session.post(method[, params][, callback])",,server.listen(),os.homedir(),path.join([...paths]),new PerformanceObserver(callback),"process.dlopen(module, filename[, flags])",,rl.setPrompt(prompt),,writable.writableHighWaterMark,,"setImmediate(callback[, ...args])",server.setTicketKeys(keys),,,"socket.dropMembership(multicastAddress[, multicastInterface])","urlSearchParams.forEach(fn[, thisArg])",util.getSystemErrorName(err),v8.deserialize(buffer),"script.runInContext(contextifiedSandbox[, options])","worker.postMessage(value[, transferList])",zlib.createGunzip([options])
assert.fail([message]),,"Class Method: Buffer.concat(list[, totalLength])",,"child_process.spawnSync(command[, args][, options])",· worker.isDead(),console.dirxml(...data),certificate.verifySpkac(spkac),"dns.resolve6(hostname[, options], callback)",,emitter.listeners(eventName),dirent.isSymbolicLink(),request.abort(),"http2session.setTimeout(msecs, callback)","https.get(url[, options][, callback])",,,"server.listen(handle[, backlog][, callback])",os.hostname(),path.normalize(path),performanceObserver.disconnect(),"process.emitWarning(warning[, options])",,"rl.write(data[, key])",,writable.writableLength,,"setInterval(callback, delay[, ...args])",tlsSocket.address(),,,socket.getRecvBufferSize(),urlSearchParams.get(name),"util.inherits(constructor, superConstructor)",serializer.writeHeader(),"script.runInNewContext([sandbox[, options]])",worker.ref(),zlib.createGzip([options])
assert.ifError(value),,Class Method: Buffer.from(array),,subprocess.disconnect(),· worker.kill([signal='SIGTERM']),"console.error([data][, ...args])",cipher.final([outputEncoding]),"dns.resolveAny(hostname, callback)",,"emitter.off(eventName, listener)",stats.isBlockDevice(),"request.end([data[, encoding]][, callback])",http2session.settings(settings),"https.request(options[, callback])",,,"server.listen(options[, callback])",os.loadavg(),path.parse(path),performanceObserver.observe(options),"process.emitWarning(warning[, type[, code]][, ctor])",,"readline.clearLine(stream, dir)",,"writable.write(chunk[, encoding][, callback])",,"setTimeout(callback, delay[, ...args])",tlsSocket.disableRenegotiation(),,,socket.getSendBufferSize(),urlSearchParams.getAll(name),"util.inspect(object[, options])",serializer.writeValue(value),script.runInThisContext([options]),worker.terminate([callback]),zlib.createInflate([options])
"assert.notDeepEqual(actual, expected[, message])",,"Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])",,subprocess.kill([signal]),"· worker.send(message[, sendHandle][, callback])",console.group([...label]),"cipher.setAAD(buffer[, options])","dns.resolveCname(hostname, callback)",,"emitter.on(eventName, listener)",stats.isCharacterDevice(),request.flushHeaders(),http2session.unref(),"https.request(url[, options][, callback])",,,"server.listen(path[, backlog][, callback])",os.networkInterfaces(),path.toNamespacedPath(path),performanceObserverEntryList.getEntries(),process.exit([code]),,readline.clearScreenDown(stream),,readable.destroy([error]),,clearImmediate(immediate),tlsSocket.getCipher(),,,socket.ref(),urlSearchParams.has(name),"util.isDeepStrictEqual(val1, val2)",serializer.releaseBuffer(),"vm.compileFunction(code[, params[, options]])",worker.unref(),zlib.createInflateRaw([options])
"assert.notDeepStrictEqual(actual, expected[, message])",,Class Method: Buffer.from(buffer),,subprocess.ref(),,console.groupCollapsed(),cipher.getAuthTag(),"dns.resolveMx(hostname, callback)",,"emitter.once(eventName, listener)",stats.isDirectory(),request.getHeader(name),"serverhttp2session.altsvc(alt, originOrStream)",,,,"server.listen([port[, host[, backlog]]][, callback])",os.platform(),"path.relative(from, to)","performanceObserverEntryList.getEntriesByName(name[, type])",process.getegid(),,readline.createInterface(options),,readable.isPaused(),,clearInterval(timeout),tlsSocket.getEphemeralKeyInfo(),,,"socket.send(msg[, offset, length], port[, address][, callback])",urlSearchParams.keys(),util.promisify(original),"serializer.transferArrayBuffer(id, arrayBuffer)","vm.createContext([sandbox[, options]])",,zlib.createUnzip([options])
"assert.notEqual(actual, expected[, message])",,"Class Method: Buffer.from(string[, encoding])",,"subprocess.send(message[, sendHandle[, options]][, callback])",,console.groupEnd(),cipher.setAutoPadding([autoPadding]),"dns.resolveNaptr(hostname, callback)",,"emitter.prependListener(eventName, listener)",stats.isFIFO(),request.removeHeader(name),"clienthttp2session.request(headers[, options])",,,,server.ref(),os.release(),path.resolve([...paths]),performanceObserverEntryList.getEntriesByType(type),process.geteuid(),,"readline.cursorTo(stream, x, y)",,readable.pause(),,clearTimeout(timeout),tlsSocket.getFinished(),,,socket.setBroadcast(flag),"urlSearchParams.set(name, value)","textDecoder.decode([input[, options]])",serializer.writeUint32(value),vm.isContext(sandbox),,"zlib.deflate(buffer[, options], callback)"
"assert.notStrictEqual(actual, expected[, message])",,"Class Method: Buffer.from(object[, offsetOrEncoding[, length]])",,subprocess.unref(),,"console.info([data][, ...args])","cipher.update(data[, inputEncoding][, outputEncoding])","dns.resolveNs(hostname, callback)",,"emitter.prependOnceListener(eventName, listener)",stats.isFile(),"request.setHeader(name, value)","http2stream.close(code[, callback])",,,,server.unref(),"os.setPriority([pid, ]priority)",,,process.getgid(),,"readline.emitKeypressEvents(stream[, interface])",,"readable.pipe(destination[, options])",,,tlsSocket.getPeerCertificate([detailed]),,,socket.setMulticastInterface(multicastInterface),urlSearchParams.sort(),textEncoder.encode([input]),"serializer.writeUint64(hi, lo)","vm.runInContext(code, contextifiedSandbox[, options])",,"zlib.deflateSync(buffer[, options])"
"assert.ok(value[, message])",,Class Method: Buffer.isBuffer(obj),,,,"console.log([data][, ...args])",decipher.final([outputEncoding]),"dns.resolvePtr(hostname, callback)",,emitter.removeAllListeners([eventName]),stats.isSocket(),request.setNoDelay([noDelay]),http2stream.priority(options),,,,new net.Socket([options]),os.tmpdir(),,,process.getgroups(),,"readline.moveCursor(stream, dx, dy)",,readable.read([size]),,,tlsSocket.getPeerFinished(),,,socket.setMulticastLoopback(flag),urlSearchParams.toString(),util.types.isAnyArrayBuffer(value),serializer.writeDouble(value),"vm.runInNewContext(code[, sandbox[, options]])",,"zlib.deflateRaw(buffer[, options], callback)"
"assert.rejects(block[, error][, message])",,Class Method: Buffer.isEncoding(encoding),,,,"console.table(tabularData[, properties])","decipher.setAAD(buffer[, options])","dns.resolveSoa(hostname, callback)",,"emitter.removeListener(eventName, listener)",stats.isSymbolicLink(),"request.setSocketKeepAlive([enable][, initialDelay])","http2stream.setTimeout(msecs, callback)",,,,socket.address(),os.totalmem(),,,process.getuid(),,,,readable.resume(),,,tlsSocket.getProtocol(),,,socket.setMulticastTTL(ttl),urlSearchParams.values(),util.types.isArgumentsObject(value),serializer.writeRawBytes(buffer),"vm.runInThisContext(code[, options])",,"zlib.deflateRawSync(buffer[, options])"
"assert.strictEqual(actual, expected[, message])",,"buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])",,,,console.time([label]),decipher.setAuthTag(buffer),"dns.resolveSrv(hostname, callback)",,emitter.setMaxListeners(n),"fs.access(path[, mode], callback)","request.setTimeout(timeout[, callback])",http2stream.sendTrailers(headers),,,,socket.connect(),os.type(),,,process.hasUncaughtExceptionCaptureCallback(),,,,readable.setEncoding(encoding),,,tlsSocket.getSession(),,,socket.setRecvBufferSize(size),urlSearchParams[Symbol.iterator](),util.types.isArrayBuffer(value),serializer._writeHostObject(object),,,"zlib.gunzip(buffer[, options], callback)"
"assert.throws(block[, error][, message])",,"buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])",,,,console.timeEnd([label]),decipher.setAutoPadding([autoPadding]),"dns.resolveTxt(hostname, callback)",,emitter.rawListeners(eventName),"fs.accessSync(path[, mode])","request.write(chunk[, encoding][, callback])",http2stream.additionalHeaders(headers),,,,"socket.connect(options[, connectListener])",os.uptime(),,,process.memoryUsage(),,,,readable.unpipe([destination]),,,tlsSocket.getTLSTicket(),,,socket.setSendBufferSize(size),url.domainToASCII(domain),util.types.isAsyncFunction(value),serializer._getDataCloneError(message),,,"zlib.gunzipSync(buffer[, options])"
,,buf.entries(),,,,"console.timeLog([label][, ...data])","decipher.update(data[, inputEncoding][, outputEncoding])","dns.reverse(ip, callback)",,,"fs.appendFile(path, data[, options], callback)",server.close([callback]),"http2stream.pushStream(headers[, options], callback)",,,,"socket.connect(path[, connectListener])",os.userInfo([options]),,,"process.nextTick(callback[, ...args])",,,,readable.unshift(chunk),,,"tlsSocket.renegotiate(options, callback)",,,socket.setTTL(ttl),url.domainToUnicode(domain),util.types.isBigInt64Array(value),serializer._getSharedArrayBufferId(sharedArrayBuffer),,,"zlib.gzip(buffer[, options], callback)"
,,buf.equals(otherBuffer),,,,"console.trace([message][, ...args])","diffieHellman.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])",dns.setServers(servers),,,"fs.appendFileSync(path, data[, options])",server.listen(),"http2stream.respond([headers[, options]])",,,,"socket.connect(port[, host][, connectListener])",,,,"process.send(message[, sendHandle[, options]][, callback])",,,,readable.wrap(stream),,,tlsSocket.setMaxSendFragment(size),,,socket.unref(),"url.format(URL[, options])",util.types.isBigUint64Array(value),serializer._setTreatArrayBufferViewsAsHostObjects(flag),,,"zlib.gzipSync(buffer[, options])"
,,"buf.fill(value[, offset[, end]][, encoding])",,,,"console.warn([data][, ...args])",diffieHellman.generateKeys([encoding]),dnsPromises.getServers(),,,"fs.chmod(path, mode, callback)","server.setTimeout([msecs][, callback])","http2stream.respondWithFD(fd[, headers[, options]])",,,,socket.destroy([exception]),,,,process.setegid(id),,,,readable[Symbol.asyncIterator](),,,"tls.checkServerIdentity(hostname, cert)",,,"dgram.createSocket(options[, callback])",url.format(urlObject),util.types.isBooleanObject(value),deserializer.readHeader(),,,"zlib.inflate(buffer[, options], callback)"
,,"buf.includes(value[, byteOffset][, encoding])",,,,console.markTimeline([label]),diffieHellman.getGenerator([encoding]),"dnsPromises.lookup(hostname[, options])",,,"fs.chmodSync(path, mode)",response.addTrailers(headers),"http2stream.respondWithFile(path[, headers[, options]])",,,,"socket.end([data][, encoding])",,,,process.seteuid(id),,,,transform.destroy([error]),,,"tls.connect(options[, callback])",,,"dgram.createSocket(type[, callback])","url.parse(urlString[, parseQueryString[, slashesDenoteHost]])",util.types.isDataView(value),deserializer.readValue(),,,"zlib.inflateSync(buffer[, options])"
,,"buf.indexOf(value[, byteOffset][, encoding])",,,,console.profile([label]),diffieHellman.getPrime([encoding]),"dnsPromises.lookupService(address, port)",,,"fs.chown(path, uid, gid, callback)","response.end([data][, encoding][, callback])",server.close([callback]),,,,socket.pause(),,,,process.setgid(id),,,,"stream.finished(stream, callback)",,,"tls.connect(path[, options][, callback])",,,,"url.resolve(from, to)",util.types.isDate(value),"deserializer.transferArrayBuffer(id, arrayBuffer)",,,"zlib.inflateRaw(buffer[, options], callback)"
,,buf.keys(),,,,console.profileEnd([label]),diffieHellman.getPrivateKey([encoding]),"dnsPromises.resolve(hostname[, rrtype])",,,"fs.chownSync(path, uid, gid)",response.getHeader(name),server.close([callback]),,,,socket.ref(),,,,process.setgroups(groups),,,,"stream.pipeline(...streams[, callback])",,,"tls.connect(port[, host][, options][, callback])",,,,,util.types.isExternal(value),deserializer.getWireFormatVersion(),,,"zlib.inflateRawSync(buffer[, options])"
,,"buf.lastIndexOf(value[, byteOffset][, encoding])",,,,console.timeStamp([label]),diffieHellman.getPublicKey([encoding]),"dnsPromises.resolve4(hostname[, options])",,,"fs.close(fd, callback)",response.getHeaderNames(),"http2.createServer(options[, onRequestHandler])",,,,socket.resume(),,,,process.setuid(id),,,,"writable._write(chunk, encoding, callback)",,,tls.createSecureContext([options]),,,,,util.types.isFloat32Array(value),deserializer.readUint32(),,,"zlib.unzip(buffer[, options], callback)"
,,buf.readDoubleBE(offset),,,,console.timeline([label]),"diffieHellman.setPrivateKey(privateKey[, encoding])","dnsPromises.resolve6(hostname[, options])",,,fs.closeSync(fd),response.getHeaders(),"http2.createSecureServer(options[, onRequestHandler])",,,,socket.setEncoding([encoding]),,,,process.setUncaughtExceptionCaptureCallback(fn),,,,"writable._writev(chunks, callback)",,,"tls.createServer([options][, secureConnectionListener])",,,,,util.types.isFloat64Array(value),deserializer.readUint64(),,,"zlib.unzipSync(buffer[, options])"
,,buf.readDoubleLE(offset),,,,console.timelineEnd([label]),"diffieHellman.setPublicKey(publicKey[, encoding])",dnsPromises.resolveAny(hostname),,,"fs.copyFile(src, dest[, flags], callback)",response.hasHeader(name),"http2.connect(authority[, options][, listener])",,,,"socket.setKeepAlive([enable][, initialDelay])",,,,process.umask([mask]),,,,"writable._destroy(err, callback)",,,tls.getCiphers(),,,,,util.types.isGeneratorFunction(value),deserializer.readDouble(),,,
,,buf.readFloatBE(offset),,,,,"Class Method: ECDH.convertKey(key, curve[, inputEncoding[, outputEncoding[, format]]])",dnsPromises.resolveCname(hostname),,,"fs.copyFileSync(src, dest[, flags])",response.removeHeader(name),http2.getDefaultSettings(),,,,socket.setNoDelay([noDelay]),,,,process.uptime(),,,,writable._final(callback),,,,,,,,util.types.isGeneratorObject(value),deserializer.readRawBytes(length),,,
,,buf.readFloatLE(offset),,,,,"ecdh.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])",dnsPromises.resolveMx(hostname),,,"fs.createReadStream(path[, options])","response.setHeader(name, value)",http2.getPackedSettings(settings),,,,"socket.setTimeout(timeout[, callback])",,,,process.hrtime([time]),,,,new stream.Readable([options]),,,,,,,,util.types.isInt8Array(value),deserializer._readHostObject(),,,
,,buf.readInt8(offset),,,,,"ecdh.generateKeys([encoding[, format]])",dnsPromises.resolveNaptr(hostname),,,"fs.createWriteStream(path[, options])","response.setTimeout(msecs[, callback])",http2.getUnpackedSettings(buf),,,,socket.unref(),,,,process.hrtime.bigint(),,,,readable._read(size),,,,,,,,util.types.isInt16Array(value),,,,
,,buf.readInt16BE(offset),,,,,ecdh.getPrivateKey([encoding]),dnsPromises.resolveNs(hostname),,,"fs.exists(path, callback)",,request.destroy([error]),,,,"socket.write(data[, encoding][, callback])",,,,"process.initgroups(user, extraGroup)",,,,"readable._destroy(err, callback)",,,,,,,,util.types.isInt32Array(value),,,,
,,buf.readInt16LE(offset),,,,,"ecdh.getPublicKey([encoding][, format])",dnsPromises.resolvePtr(hostname),,,fs.existsSync(path),,"request.setTimeout(msecs, callback)",,,,net.connect(),,,,"process.kill(pid[, signal])",,,,"readable.push(chunk[, encoding])",,,,,,,,util.types.isMap(value),,,,
,,buf.readInt32BE(offset),,,,,"ecdh.setPrivateKey(privateKey[, encoding])",dnsPromises.resolveSoa(hostname),,,"fs.fchmod(fd, mode, callback)",,response.addTrailers(headers),,,,"net.connect(options[, connectListener])",,,,,,,,new stream.Duplex(options),,,,,,,,util.types.isMapIterator(value),,,,
,,buf.readInt32LE(offset),,,,,"ecdh.setPublicKey(publicKey[, encoding])",dnsPromises.resolveSrv(hostname),,,"fs.fchmodSync(fd, mode)",,"response.end([data][, encoding][, callback])",,,,"net.connect(path[, connectListener])",,,,,,,,new stream.Transform([options]),,,,,,,,util.types.isModuleNamespaceObject(value),,,,
,,"buf.readIntBE(offset, byteLength)",,,,,hash.digest([encoding]),dnsPromises.resolveTxt(hostname),,,"fs.fchown(fd, uid, gid, callback)",,response.getHeader(name),,,,"net.connect(port[, host][, connectListener])",,,,,,,,transform._flush(callback),,,,,,,,util.types.isNativeError(value),,,,
,,"buf.readIntLE(offset, byteLength)",,,,,"hash.update(data[, inputEncoding])",dnsPromises.reverse(ip),,,"fs.fchownSync(fd, uid, gid)",,response.getHeaderNames(),,,,net.createConnection(),,,,,,,,"transform._transform(chunk, encoding, callback)",,,,,,,,util.types.isNumberObject(value),,,,
,,buf.readUInt8(offset),,,,,hmac.digest([encoding]),dnsPromises.setServers(servers),,,"fs.fdatasync(fd, callback)",,response.getHeaders(),,,,"net.createConnection(options[, connectListener])",,,,,,,,readable.read(0),,,,,,,,util.types.isPromise(value),,,,
,,buf.readUInt16BE(offset),,,,,"hmac.update(data[, inputEncoding])",dns.lookup(),,,fs.fdatasyncSync(fd),,response.hasHeader(name),,,,"net.createConnection(path[, connectListener])",,,,,,,,readable.push(''),,,,,,,,util.types.isProxy(value),,,,
,,buf.readUInt16LE(offset),,,,,"sign.sign(privateKey[, outputFormat])","dns.resolve(), dns.resolve*() and dns.reverse()",,,"fs.fstat(fd[, options], callback)",,response.removeHeader(name),,,,"net.createConnection(port[, host][, connectListener])",,,,,,,,,,,,,,,,util.types.isRegExp(value),,,,
,,buf.readUInt32BE(offset),,,,,"sign.update(data[, inputEncoding])",,,,"fs.fstatSync(fd[, options])",,"response.setHeader(name, value)",,,,"net.createServer([options][, connectionListener])",,,,,,,,,,,,,,,,util.types.isSet(value),,,,
,,buf.readUInt32LE(offset),,,,,"verify.update(data[, inputEncoding])",,,,"fs.fsync(fd, callback)",,"response.setTimeout(msecs[, callback])",,,,net.isIP(input),,,,,,,,,,,,,,,,util.types.isSetIterator(value),,,,
,,"buf.readUIntBE(offset, byteLength)",,,,,"verify.verify(object, signature[, signatureFormat])",,,,fs.fsyncSync(fd),,"response.write(chunk[, encoding][, callback])",,,,net.isIPv4(input),,,,,,,,,,,,,,,,util.types.isSharedArrayBuffer(value),,,,
,,"buf.readUIntLE(offset, byteLength)",,,,,crypto module methods and properties,,,,"fs.ftruncate(fd[, len], callback)",,response.writeContinue(),,,,net.isIPv6(input),,,,,,,,,,,,,,,,util.types.isStringObject(value),,,,
,,"buf.slice([start[, end]])",,,,,"crypto.createCipher(algorithm, password[, options])",,,,"fs.ftruncateSync(fd[, len])",,"response.writeHead(statusCode[, statusMessage][, headers])",,,,,,,,,,,,,,,,,,,,util.types.isSymbolObject(value),,,,
,,buf.swap16(),,,,,"crypto.createCipheriv(algorithm, key, iv[, options])",,,,"fs.futimes(fd, atime, mtime, callback)",,"response.createPushResponse(headers, callback)",,,,,,,,,,,,,,,,,,,,util.types.isTypedArray(value),,,,
,,buf.swap32(),,,,,crypto.createCredentials(details),,,,"fs.futimesSync(fd, atime, mtime)",,,,,,,,,,,,,,,,,,,,,,util.types.isUint8Array(value),,,,
,,buf.swap64(),,,,,"crypto.createDecipher(algorithm, password[, options])",,,,"fs.lchmod(path, mode, callback)",,,,,,,,,,,,,,,,,,,,,,util.types.isUint8ClampedArray(value),,,,
,,buf.toJSON(),,,,,"crypto.createDecipheriv(algorithm, key, iv[, options])",,,,"fs.lchmodSync(path, mode)",,,,,,,,,,,,,,,,,,,,,,util.types.isUint16Array(value),,,,
,,"buf.toString([encoding[, start[, end]]])",,,,,"crypto.createDiffieHellman(prime[, primeEncoding][, generator][, generatorEncoding])",,,,"fs.lchown(path, uid, gid, callback)",,,,,,,,,,,,,,,,,,,,,,util.types.isUint32Array(value),,,,
,,buf.values(),,,,,"crypto.createDiffieHellman(primeLength[, generator])",,,,"fs.lchownSync(path, uid, gid)",,,,,,,,,,,,,,,,,,,,,,util.types.isWeakMap(value),,,,
,,"buf.write(string[, offset[, length]][, encoding])",,,,,crypto.createECDH(curveName),,,,"fs.link(existingPath, newPath, callback)","response.write(chunk[, encoding][, callback])",,,,,,,,,,,,,,,,,,,,,util.types.isWeakSet(value),,,,
,,"buf.writeDoubleBE(value, offset)",,,,,"crypto.createHash(algorithm[, options])",,,,"fs.linkSync(existingPath, newPath)",response.writeContinue(),,,,,,,,,,,,,,,,,,,,,util.types.isWebAssemblyCompiledModule(value),,,,
,,"buf.writeDoubleLE(value, offset)",,,,,"crypto.createHmac(algorithm, key[, options])",,,,"fs.lstat(path[, options], callback)","response.writeHead(statusCode[, statusMessage][, headers])",,,,,,,,,,,,,,,,,,,,,"util._extend(target, source)",,,,
,,"buf.writeFloatBE(value, offset)",,,,,"crypto.createSign(algorithm[, options])",,,,"fs.lstatSync(path[, options])",response.writeProcessing(),,,,,,,,,,,,,,,,,,,,,util.debug(string),,,,
,,"buf.writeFloatLE(value, offset)",,,,,"crypto.createVerify(algorithm[, options])",,,,"fs.mkdir(path[, mode], callback)",message.destroy([error]),,,,,,,,,,,,,,,,,,,,,util.error([...strings]),,,,
,,"buf.writeInt8(value, offset)",,,,,crypto.getCiphers(),,,,"fs.mkdirSync(path[, mode])","message.setTimeout(msecs, callback)",,,,,,,,,,,,,,,,,,,,,util.isArray(object),,,,
,,"buf.writeInt16BE(value, offset)",,,,,crypto.getCurves(),,,,"fs.mkdtemp(prefix[, options], callback)",,,,,,,,,,,,,,,,,,,,,,util.isBoolean(object),,,,
,,"buf.writeInt16LE(value, offset)",,,,,crypto.getDiffieHellman(groupName),,,,"fs.mkdtempSync(prefix[, options])",,,,,,,,,,,,,,,,,,,,,,util.isBuffer(object),,,,
,,"buf.writeInt32BE(value, offset)",,,,,crypto.getFips(),,,,"fs.open(path, flags[, mode], callback)",,,,,,,,,,,,,,,,,,,,,,util.isDate(object),,,,
,,"buf.writeInt32LE(value, offset)",,,,,crypto.getHashes(),,,,"fs.openSync(path, flags[, mode])",,,,,,,,,,,,,,,,,,,,,,util.isError(object),,,,
,,"buf.writeIntBE(value, offset, byteLength)",,,,,"crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)",,,,"fs.read(fd, buffer, offset, length, position, callback)",,,,,,,,,,,,,,,,,,,,,,util.isFunction(object),,,,
,,"buf.writeIntLE(value, offset, byteLength)",,,,,"crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)",,,,"fs.readdir(path[, options], callback)",,,,,,,,,,,,,,,,,,,,,,util.isNull(object),,,,
,,"buf.writeUInt8(value, offset)",,,,,"crypto.privateDecrypt(privateKey, buffer)",,,,"fs.readdirSync(path[, options])",,,,,,,,,,,,,,,,,,,,,,util.isNullOrUndefined(object),,,,
,,"buf.writeUInt16BE(value, offset)",,,,,"crypto.privateEncrypt(privateKey, buffer)",,,,"fs.readFile(path[, options], callback)",,,,,,,,,,,,,,,,,,,,,,util.isNumber(object),,,,
,,"buf.writeUInt16LE(value, offset)",,,,,"crypto.publicDecrypt(key, buffer)",,,,"fs.readFileSync(path[, options])",,,,,,,,,,,,,,,,,,,,,,util.isObject(object),,,,
,,"buf.writeUInt32BE(value, offset)",,,,,"crypto.publicEncrypt(key, buffer)",,,,"fs.readlink(path[, options], callback)",,,,,,,,,,,,,,,,,,,,,,util.isPrimitive(object),,,,
,,"buf.writeUInt32LE(value, offset)",,,,,"crypto.randomBytes(size[, callback])",,,,"fs.readlinkSync(path[, options])",,,,,,,,,,,,,,,,,,,,,,util.isRegExp(object),,,,
,,"buf.writeUIntBE(value, offset, byteLength)",,,,,"crypto.randomFillSync(buffer[, offset][, size])",,,,"fs.readSync(fd, buffer, offset, length, position)",http.METHODS,,,,,,,,,,,,,,,,,,,,,util.isString(object),,,,
,,"buf.writeUIntLE(value, offset, byteLength)",,,,,"crypto.randomFill(buffer[, offset][, size], callback)",,,,"fs.realpath(path[, options], callback)",http.STATUS_CODES,,,,,,,,,,,,,,,,,,,,,util.isSymbol(object),,,,
,,,,,,,"crypto.scrypt(password, salt, keylen[, options], callback)",,,,"fs.realpath.native(path[, options], callback)","http.createServer([options][, requestListener])",,,,,,,,,,,,,,,,,,,,,util.isUndefined(object),,,,
,,,,,,,"crypto.scryptSync(password, salt, keylen[, options])",,,,"fs.realpathSync(path[, options])","http.get(options[, callback])",,,,,,,,,,,,,,,,,,,,,util.log(string),,,,
,,,,,,,"crypto.setEngine(engine[, flags])",,,,"fs.realpathSync.native(path[, options])","http.get(url[, options][, callback])",,,,,,,,,,,,,,,,,,,,,util.print([...strings]),,,,
,,,,,,,crypto.setFips(bool),,,,"fs.rename(oldPath, newPath, callback)",http.globalAgent,,,,,,,,,,,,,,,,,,,,,util.puts([...strings]),,,,
,,,,,,,"crypto.timingSafeEqual(a, b)",,,,"fs.renameSync(oldPath, newPath)","http.request(options[, callback])",,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.rmdir(path, callback)","http.request(url[, options][, callback])",,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,fs.rmdirSync(path),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.stat(path[, options], callback)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.statSync(path[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.symlink(target, path[, type], callback)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.symlinkSync(target, path[, type])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.truncate(path[, len], callback)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.truncateSync(path[, len])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.unlink(path, callback)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,fs.unlinkSync(path),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.unwatchFile(filename[, listener])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.utimes(path, atime, mtime, callback)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.utimesSync(path, atime, mtime)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.watch(filename[, options][, listener])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.watchFile(filename[, options], listener)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.write(fd, buffer[, offset[, length[, position]]], callback)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.write(fd, string[, position[, encoding]], callback)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.writeFile(file, data[, options], callback)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.writeFileSync(file, data[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.writeSync(fd, buffer[, offset[, length[, position]]])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fs.writeSync(fd, string[, position[, encoding]])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"filehandle.appendFile(data, options)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,filehandle.chmod(mode),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"filehandle.chown(uid, gid)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,filehandle.close(),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,filehandle.datasync(),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"filehandle.read(buffer, offset, length, position)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,filehandle.readFile(options),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,filehandle.stat([options]),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,filehandle.sync(),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,filehandle.truncate(len),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"filehandle.utimes(atime, mtime)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"filehandle.write(buffer, offset, length, position)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"filehandle.writeFile(data, options)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.access(path[, mode])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.appendFile(path, data[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.chmod(path, mode)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.chown(path, uid, gid)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.copyFile(src, dest[, flags])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.lchmod(path, mode)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.lchown(path, uid, gid)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.link(existingPath, newPath)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.lstat(path[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.mkdir(path[, mode])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.mkdtemp(prefix[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.open(path, flags[, mode])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.readdir(path[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.readFile(path[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.readlink(path[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.realpath(path[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.rename(oldPath, newPath)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,fsPromises.rmdir(path),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.stat(path[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.symlink(target, path[, type])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.truncate(path[, len])",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,fsPromises.unlink(path),,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.utimes(path, atime, mtime)",,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,"fsPromises.writeFile(file, data[, options])",,,,,,,,,,,,,,,,,,,,,,,,,,